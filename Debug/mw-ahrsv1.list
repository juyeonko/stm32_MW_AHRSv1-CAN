
mw-ahrsv1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c10  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002dd4  08002dd4  00012dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e04  08002e04  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002e04  08002e04  00012e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002e0c  08002e0c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e0c  08002e0c  00012e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e10  08002e10  00012e10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002e14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  2000000c  08002e20  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000fc  08002e20  000200fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007a18  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001746  00000000  00000000  00027a54  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000670  00000000  00000000  000291a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005a8  00000000  00000000  00029810  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021123  00000000  00000000  00029db8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000065d4  00000000  00000000  0004aedb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c7978  00000000  00000000  000514af  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00118e27  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000018f4  00000000  00000000  00118ea4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002dbc 	.word	0x08002dbc

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08002dbc 	.word	0x08002dbc

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b972 	b.w	8000500 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	4688      	mov	r8, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14b      	bne.n	80002da <__udivmoddi4+0xa6>
 8000242:	428a      	cmp	r2, r1
 8000244:	4615      	mov	r5, r2
 8000246:	d967      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0720 	rsb	r7, r2, #32
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	fa20 f707 	lsr.w	r7, r0, r7
 800025a:	4095      	lsls	r5, r2
 800025c:	ea47 0803 	orr.w	r8, r7, r3
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbb8 f7fe 	udiv	r7, r8, lr
 800026c:	fa1f fc85 	uxth.w	ip, r5
 8000270:	fb0e 8817 	mls	r8, lr, r7, r8
 8000274:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000278:	fb07 f10c 	mul.w	r1, r7, ip
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18eb      	adds	r3, r5, r3
 8000282:	f107 30ff 	add.w	r0, r7, #4294967295
 8000286:	f080 811b 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8118 	bls.w	80004c0 <__udivmoddi4+0x28c>
 8000290:	3f02      	subs	r7, #2
 8000292:	442b      	add	r3, r5
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0fe 	udiv	r0, r3, lr
 800029c:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a8:	45a4      	cmp	ip, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	192c      	adds	r4, r5, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x290>
 80002b6:	45a4      	cmp	ip, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x290>
 80002bc:	3802      	subs	r0, #2
 80002be:	442c      	add	r4, r5
 80002c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c4:	eba4 040c 	sub.w	r4, r4, ip
 80002c8:	2700      	movs	r7, #0
 80002ca:	b11e      	cbz	r6, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c6 4300 	strd	r4, r3, [r6]
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xbe>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80eb 	beq.w	80004ba <__udivmoddi4+0x286>
 80002e4:	2700      	movs	r7, #0
 80002e6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ea:	4638      	mov	r0, r7
 80002ec:	4639      	mov	r1, r7
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f783 	clz	r7, r3
 80002f6:	2f00      	cmp	r7, #0
 80002f8:	d147      	bne.n	800038a <__udivmoddi4+0x156>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd0>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80fa 	bhi.w	80004f8 <__udivmoddi4+0x2c4>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	4698      	mov	r8, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000312:	e9c6 4800 	strd	r4, r8, [r6]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xe8>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 808f 	bne.w	8000444 <__udivmoddi4+0x210>
 8000326:	1b49      	subs	r1, r1, r5
 8000328:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800032c:	fa1f f885 	uxth.w	r8, r5
 8000330:	2701      	movs	r7, #1
 8000332:	fbb1 fcfe 	udiv	ip, r1, lr
 8000336:	0c23      	lsrs	r3, r4, #16
 8000338:	fb0e 111c 	mls	r1, lr, ip, r1
 800033c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000340:	fb08 f10c 	mul.w	r1, r8, ip
 8000344:	4299      	cmp	r1, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x124>
 8000348:	18eb      	adds	r3, r5, r3
 800034a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4299      	cmp	r1, r3
 8000352:	f200 80cd 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 8000356:	4684      	mov	ip, r0
 8000358:	1a59      	subs	r1, r3, r1
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000360:	fb0e 1410 	mls	r4, lr, r0, r1
 8000364:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000368:	fb08 f800 	mul.w	r8, r8, r0
 800036c:	45a0      	cmp	r8, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x14c>
 8000370:	192c      	adds	r4, r5, r4
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x14a>
 8000378:	45a0      	cmp	r8, r4
 800037a:	f200 80b6 	bhi.w	80004ea <__udivmoddi4+0x2b6>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 0408 	sub.w	r4, r4, r8
 8000384:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000388:	e79f      	b.n	80002ca <__udivmoddi4+0x96>
 800038a:	f1c7 0c20 	rsb	ip, r7, #32
 800038e:	40bb      	lsls	r3, r7
 8000390:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000394:	ea4e 0e03 	orr.w	lr, lr, r3
 8000398:	fa01 f407 	lsl.w	r4, r1, r7
 800039c:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a8:	4325      	orrs	r5, r4
 80003aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ae:	0c2c      	lsrs	r4, r5, #16
 80003b0:	fb08 3319 	mls	r3, r8, r9, r3
 80003b4:	fa1f fa8e 	uxth.w	sl, lr
 80003b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003bc:	fb09 f40a 	mul.w	r4, r9, sl
 80003c0:	429c      	cmp	r4, r3
 80003c2:	fa02 f207 	lsl.w	r2, r2, r7
 80003c6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1e 0303 	adds.w	r3, lr, r3
 80003d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d4:	f080 8087 	bcs.w	80004e6 <__udivmoddi4+0x2b2>
 80003d8:	429c      	cmp	r4, r3
 80003da:	f240 8084 	bls.w	80004e6 <__udivmoddi4+0x2b2>
 80003de:	f1a9 0902 	sub.w	r9, r9, #2
 80003e2:	4473      	add	r3, lr
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	b2ad      	uxth	r5, r5
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1e 0404 	adds.w	r4, lr, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295
 8000404:	d26b      	bcs.n	80004de <__udivmoddi4+0x2aa>
 8000406:	45a2      	cmp	sl, r4
 8000408:	d969      	bls.n	80004de <__udivmoddi4+0x2aa>
 800040a:	3802      	subs	r0, #2
 800040c:	4474      	add	r4, lr
 800040e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000412:	fba0 8902 	umull	r8, r9, r0, r2
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	454c      	cmp	r4, r9
 800041c:	46c2      	mov	sl, r8
 800041e:	464b      	mov	r3, r9
 8000420:	d354      	bcc.n	80004cc <__udivmoddi4+0x298>
 8000422:	d051      	beq.n	80004c8 <__udivmoddi4+0x294>
 8000424:	2e00      	cmp	r6, #0
 8000426:	d069      	beq.n	80004fc <__udivmoddi4+0x2c8>
 8000428:	ebb1 050a 	subs.w	r5, r1, sl
 800042c:	eb64 0403 	sbc.w	r4, r4, r3
 8000430:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000434:	40fd      	lsrs	r5, r7
 8000436:	40fc      	lsrs	r4, r7
 8000438:	ea4c 0505 	orr.w	r5, ip, r5
 800043c:	e9c6 5400 	strd	r5, r4, [r6]
 8000440:	2700      	movs	r7, #0
 8000442:	e747      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f703 	lsr.w	r7, r0, r3
 800044c:	4095      	lsls	r5, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	fa21 f303 	lsr.w	r3, r1, r3
 8000456:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045a:	4338      	orrs	r0, r7
 800045c:	0c01      	lsrs	r1, r0, #16
 800045e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000462:	fa1f f885 	uxth.w	r8, r5
 8000466:	fb0e 3317 	mls	r3, lr, r7, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb07 f308 	mul.w	r3, r7, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x256>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000480:	d22f      	bcs.n	80004e2 <__udivmoddi4+0x2ae>
 8000482:	428b      	cmp	r3, r1
 8000484:	d92d      	bls.n	80004e2 <__udivmoddi4+0x2ae>
 8000486:	3f02      	subs	r7, #2
 8000488:	4429      	add	r1, r5
 800048a:	1acb      	subs	r3, r1, r3
 800048c:	b281      	uxth	r1, r0
 800048e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000492:	fb0e 3310 	mls	r3, lr, r0, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb00 f308 	mul.w	r3, r0, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x27e>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a8:	d217      	bcs.n	80004da <__udivmoddi4+0x2a6>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d915      	bls.n	80004da <__udivmoddi4+0x2a6>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1ac9      	subs	r1, r1, r3
 80004b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b8:	e73b      	b.n	8000332 <__udivmoddi4+0xfe>
 80004ba:	4637      	mov	r7, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e709      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004c0:	4607      	mov	r7, r0
 80004c2:	e6e7      	b.n	8000294 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c8:	4541      	cmp	r1, r8
 80004ca:	d2ab      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d0:	eb69 020e 	sbc.w	r2, r9, lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4613      	mov	r3, r2
 80004d8:	e7a4      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004da:	4660      	mov	r0, ip
 80004dc:	e7e9      	b.n	80004b2 <__udivmoddi4+0x27e>
 80004de:	4618      	mov	r0, r3
 80004e0:	e795      	b.n	800040e <__udivmoddi4+0x1da>
 80004e2:	4667      	mov	r7, ip
 80004e4:	e7d1      	b.n	800048a <__udivmoddi4+0x256>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e77c      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	442c      	add	r4, r5
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0x14c>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	442b      	add	r3, r5
 80004f6:	e72f      	b.n	8000358 <__udivmoddi4+0x124>
 80004f8:	4638      	mov	r0, r7
 80004fa:	e708      	b.n	800030e <__udivmoddi4+0xda>
 80004fc:	4637      	mov	r7, r6
 80004fe:	e6e9      	b.n	80002d4 <__udivmoddi4+0xa0>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <mw_ahrs_input_data>:
char direction[] = "i";
float Azimuth = 0;
float value = 0;

void mw_ahrs_input_data(MW_AHRS *dst)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
	 if(dst->can_read_data[0] == 0xF0)
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000512:	2bf0      	cmp	r3, #240	; 0xf0
 8000514:	f040 8175 	bne.w	8000802 <mw_ahrs_input_data+0x2fe>
	{
		switch(dst->can_read_data[1])
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800051e:	3b33      	subs	r3, #51	; 0x33
 8000520:	2b03      	cmp	r3, #3
 8000522:	f200 8153 	bhi.w	80007cc <mw_ahrs_input_data+0x2c8>
 8000526:	a201      	add	r2, pc, #4	; (adr r2, 800052c <mw_ahrs_input_data+0x28>)
 8000528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800052c:	0800053d 	.word	0x0800053d
 8000530:	080005e1 	.word	0x080005e1
 8000534:	08000685 	.word	0x08000685
 8000538:	08000729 	.word	0x08000729
		{
		case ACCELERATION:
			memcpy(dst->a_raw_data, &dst->can_read_data[2], 6);
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	3352      	adds	r3, #82	; 0x52
 8000546:	2206      	movs	r2, #6
 8000548:	4619      	mov	r1, r3
 800054a:	f002 fc23 	bl	8002d94 <memcpy>
			dst->a_x = GET_S16_BYTE(dst->a_raw_data[0], dst->a_raw_data[1]) / 1000.0f;
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000554:	b29a      	uxth	r2, r3
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800055c:	b29b      	uxth	r3, r3
 800055e:	021b      	lsls	r3, r3, #8
 8000560:	b29b      	uxth	r3, r3
 8000562:	4413      	add	r3, r2
 8000564:	b29b      	uxth	r3, r3
 8000566:	b21b      	sxth	r3, r3
 8000568:	ee07 3a90 	vmov	s15, r3
 800056c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000570:	eddf 6aa6 	vldr	s13, [pc, #664]	; 800080c <mw_ahrs_input_data+0x308>
 8000574:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	edc3 7a00 	vstr	s15, [r3]
			dst->a_y = GET_S16_BYTE(dst->a_raw_data[2], dst->a_raw_data[3]) / 1000.0f;
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8000584:	b29a      	uxth	r2, r3
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800058c:	b29b      	uxth	r3, r3
 800058e:	021b      	lsls	r3, r3, #8
 8000590:	b29b      	uxth	r3, r3
 8000592:	4413      	add	r3, r2
 8000594:	b29b      	uxth	r3, r3
 8000596:	b21b      	sxth	r3, r3
 8000598:	ee07 3a90 	vmov	s15, r3
 800059c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80005a0:	eddf 6a9a 	vldr	s13, [pc, #616]	; 800080c <mw_ahrs_input_data+0x308>
 80005a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	edc3 7a01 	vstr	s15, [r3, #4]
			dst->a_z = GET_S16_BYTE(dst->a_raw_data[4], dst->a_raw_data[5]) / 1000.0f;
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80005b4:	b29a      	uxth	r2, r3
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80005bc:	b29b      	uxth	r3, r3
 80005be:	021b      	lsls	r3, r3, #8
 80005c0:	b29b      	uxth	r3, r3
 80005c2:	4413      	add	r3, r2
 80005c4:	b29b      	uxth	r3, r3
 80005c6:	b21b      	sxth	r3, r3
 80005c8:	ee07 3a90 	vmov	s15, r3
 80005cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80005d0:	eddf 6a8e 	vldr	s13, [pc, #568]	; 800080c <mw_ahrs_input_data+0x308>
 80005d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	edc3 7a02 	vstr	s15, [r3, #8]
			break;
 80005de:	e0f5      	b.n	80007cc <mw_ahrs_input_data+0x2c8>
		case GYROSCOPE:
			memcpy(dst->g_raw_data, &dst->can_read_data[2], 6);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	f103 0036 	add.w	r0, r3, #54	; 0x36
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	3352      	adds	r3, #82	; 0x52
 80005ea:	2206      	movs	r2, #6
 80005ec:	4619      	mov	r1, r3
 80005ee:	f002 fbd1 	bl	8002d94 <memcpy>
			dst->g_x = GET_S16_BYTE(dst->g_raw_data[0], dst->g_raw_data[1]) / 10.0f;
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80005f8:	b29a      	uxth	r2, r3
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8000600:	b29b      	uxth	r3, r3
 8000602:	021b      	lsls	r3, r3, #8
 8000604:	b29b      	uxth	r3, r3
 8000606:	4413      	add	r3, r2
 8000608:	b29b      	uxth	r3, r3
 800060a:	b21b      	sxth	r3, r3
 800060c:	ee07 3a90 	vmov	s15, r3
 8000610:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000614:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8000618:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	edc3 7a03 	vstr	s15, [r3, #12]
			dst->g_y = GET_S16_BYTE(dst->g_raw_data[2], dst->g_raw_data[3]) / 10.0f;
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000628:	b29a      	uxth	r2, r3
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000630:	b29b      	uxth	r3, r3
 8000632:	021b      	lsls	r3, r3, #8
 8000634:	b29b      	uxth	r3, r3
 8000636:	4413      	add	r3, r2
 8000638:	b29b      	uxth	r3, r3
 800063a:	b21b      	sxth	r3, r3
 800063c:	ee07 3a90 	vmov	s15, r3
 8000640:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000644:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8000648:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	edc3 7a04 	vstr	s15, [r3, #16]
			dst->g_z = GET_S16_BYTE(dst->g_raw_data[4], dst->g_raw_data[5]) / 10.0f;
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8000658:	b29a      	uxth	r2, r3
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8000660:	b29b      	uxth	r3, r3
 8000662:	021b      	lsls	r3, r3, #8
 8000664:	b29b      	uxth	r3, r3
 8000666:	4413      	add	r3, r2
 8000668:	b29b      	uxth	r3, r3
 800066a:	b21b      	sxth	r3, r3
 800066c:	ee07 3a90 	vmov	s15, r3
 8000670:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000674:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8000678:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	edc3 7a05 	vstr	s15, [r3, #20]
			break;
 8000682:	e0a3      	b.n	80007cc <mw_ahrs_input_data+0x2c8>
		case ANGLE:
			memcpy(dst->e_raw_data, &dst->can_read_data[2], 6);
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	3352      	adds	r3, #82	; 0x52
 800068e:	2206      	movs	r2, #6
 8000690:	4619      	mov	r1, r3
 8000692:	f002 fb7f 	bl	8002d94 <memcpy>
			dst->e_roll = GET_S16_BYTE(dst->e_raw_data[0], dst->e_raw_data[1]) / 100.0f;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800069c:	b29a      	uxth	r2, r3
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80006a4:	b29b      	uxth	r3, r3
 80006a6:	021b      	lsls	r3, r3, #8
 80006a8:	b29b      	uxth	r3, r3
 80006aa:	4413      	add	r3, r2
 80006ac:	b29b      	uxth	r3, r3
 80006ae:	b21b      	sxth	r3, r3
 80006b0:	ee07 3a90 	vmov	s15, r3
 80006b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006b8:	eddf 6a55 	vldr	s13, [pc, #340]	; 8000810 <mw_ahrs_input_data+0x30c>
 80006bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	edc3 7a08 	vstr	s15, [r3, #32]
			dst->e_pitch = GET_S16_BYTE(dst->e_raw_data[2], dst->e_raw_data[3]) / 100.0f;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80006cc:	b29a      	uxth	r2, r3
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80006d4:	b29b      	uxth	r3, r3
 80006d6:	021b      	lsls	r3, r3, #8
 80006d8:	b29b      	uxth	r3, r3
 80006da:	4413      	add	r3, r2
 80006dc:	b29b      	uxth	r3, r3
 80006de:	b21b      	sxth	r3, r3
 80006e0:	ee07 3a90 	vmov	s15, r3
 80006e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006e8:	eddf 6a49 	vldr	s13, [pc, #292]	; 8000810 <mw_ahrs_input_data+0x30c>
 80006ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	edc3 7a07 	vstr	s15, [r3, #28]
			dst->e_yaw = GET_S16_BYTE(dst->e_raw_data[4], dst->e_raw_data[5]) / 100.0f;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80006fc:	b29a      	uxth	r2, r3
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000704:	b29b      	uxth	r3, r3
 8000706:	021b      	lsls	r3, r3, #8
 8000708:	b29b      	uxth	r3, r3
 800070a:	4413      	add	r3, r2
 800070c:	b29b      	uxth	r3, r3
 800070e:	b21b      	sxth	r3, r3
 8000710:	ee07 3a90 	vmov	s15, r3
 8000714:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000718:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8000810 <mw_ahrs_input_data+0x30c>
 800071c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	edc3 7a06 	vstr	s15, [r3, #24]
			break;
 8000726:	e051      	b.n	80007cc <mw_ahrs_input_data+0x2c8>
		case MAGNETIC:
			memcpy(dst->m_raw_data, &dst->can_read_data[2], 6);
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	f103 0042 	add.w	r0, r3, #66	; 0x42
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	3352      	adds	r3, #82	; 0x52
 8000732:	2206      	movs	r2, #6
 8000734:	4619      	mov	r1, r3
 8000736:	f002 fb2d 	bl	8002d94 <memcpy>
			dst->m_x = GET_S16_BYTE(dst->m_raw_data[0], dst->m_raw_data[1]) / 10.0f;
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8000740:	b29a      	uxth	r2, r3
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8000748:	b29b      	uxth	r3, r3
 800074a:	021b      	lsls	r3, r3, #8
 800074c:	b29b      	uxth	r3, r3
 800074e:	4413      	add	r3, r2
 8000750:	b29b      	uxth	r3, r3
 8000752:	b21b      	sxth	r3, r3
 8000754:	ee07 3a90 	vmov	s15, r3
 8000758:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800075c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8000760:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			dst->m_y = GET_S16_BYTE(dst->m_raw_data[2], dst->m_raw_data[3]) / 10.0f;
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000770:	b29a      	uxth	r2, r3
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000778:	b29b      	uxth	r3, r3
 800077a:	021b      	lsls	r3, r3, #8
 800077c:	b29b      	uxth	r3, r3
 800077e:	4413      	add	r3, r2
 8000780:	b29b      	uxth	r3, r3
 8000782:	b21b      	sxth	r3, r3
 8000784:	ee07 3a90 	vmov	s15, r3
 8000788:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800078c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8000790:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			dst->m_z = GET_S16_BYTE(dst->m_raw_data[4], dst->m_raw_data[5]) / 10.0f;
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80007a0:	b29a      	uxth	r2, r3
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80007a8:	b29b      	uxth	r3, r3
 80007aa:	021b      	lsls	r3, r3, #8
 80007ac:	b29b      	uxth	r3, r3
 80007ae:	4413      	add	r3, r2
 80007b0:	b29b      	uxth	r3, r3
 80007b2:	b21b      	sxth	r3, r3
 80007b4:	ee07 3a90 	vmov	s15, r3
 80007b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80007bc:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80007c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			break;
 80007ca:	bf00      	nop
                }

                value = dst->m_x / dst->m_y;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80007d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80007dc:	4b0d      	ldr	r3, [pc, #52]	; (8000814 <mw_ahrs_input_data+0x310>)
 80007de:	edc3 7a00 	vstr	s15, [r3]
                Azimuth = 90 - atanf(value);
 80007e2:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <mw_ahrs_input_data+0x310>)
 80007e4:	edd3 7a00 	vldr	s15, [r3]
 80007e8:	eeb0 0a67 	vmov.f32	s0, s15
 80007ec:	f002 f9d2 	bl	8002b94 <atanf>
 80007f0:	eeb0 7a40 	vmov.f32	s14, s0
 80007f4:	eddf 7a08 	vldr	s15, [pc, #32]	; 8000818 <mw_ahrs_input_data+0x314>
 80007f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80007fc:	4b07      	ldr	r3, [pc, #28]	; (800081c <mw_ahrs_input_data+0x318>)
 80007fe:	edc3 7a00 	vstr	s15, [r3]
                  strcpy(direction, "SW"); //South West
                }
                */

	}
}
 8000802:	bf00      	nop
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	447a0000 	.word	0x447a0000
 8000810:	42c80000 	.word	0x42c80000
 8000814:	2000002c 	.word	0x2000002c
 8000818:	42b40000 	.word	0x42b40000
 800081c:	20000028 	.word	0x20000028

08000820 <mw_ahrs_set_data_type>:


void mw_ahrs_set_data_type(MW_AHRS *dst, uint8_t acc, uint8_t gyro, uint8_t angle, uint8_t mangetic)
{
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
 8000828:	4608      	mov	r0, r1
 800082a:	4611      	mov	r1, r2
 800082c:	461a      	mov	r2, r3
 800082e:	4603      	mov	r3, r0
 8000830:	70fb      	strb	r3, [r7, #3]
 8000832:	460b      	mov	r3, r1
 8000834:	70bb      	strb	r3, [r7, #2]
 8000836:	4613      	mov	r3, r2
 8000838:	707b      	strb	r3, [r7, #1]
	// 18 16 00 00    xx 00 00 00
	dst->can_write_data[0] = AC_OBJECT_WRITE_REQ + OT_INT32;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	2218      	movs	r2, #24
 800083e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	dst->can_write_data[1] = SET_CAN_DATA;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	2216      	movs	r2, #22
 8000846:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	dst->can_write_data[2] = 0;
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	2200      	movs	r2, #0
 800084e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	dst->can_write_data[3] = 0;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	2200      	movs	r2, #0
 8000856:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	dst->can_write_data[4] = (acc << DT_ACC) + (gyro << DT_GYRO) + (angle << DT_ANGLE) + (mangetic << DT_MAGNETIC);
 800085a:	78bb      	ldrb	r3, [r7, #2]
 800085c:	005b      	lsls	r3, r3, #1
 800085e:	b2da      	uxtb	r2, r3
 8000860:	78fb      	ldrb	r3, [r7, #3]
 8000862:	4413      	add	r3, r2
 8000864:	b2da      	uxtb	r2, r3
 8000866:	787b      	ldrb	r3, [r7, #1]
 8000868:	009b      	lsls	r3, r3, #2
 800086a:	b2db      	uxtb	r3, r3
 800086c:	4413      	add	r3, r2
 800086e:	b2da      	uxtb	r2, r3
 8000870:	7c3b      	ldrb	r3, [r7, #16]
 8000872:	00db      	lsls	r3, r3, #3
 8000874:	b2db      	uxtb	r3, r3
 8000876:	4413      	add	r3, r2
 8000878:	b2da      	uxtb	r2, r3
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	dst->can_write_data[5] = 0;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	2200      	movs	r2, #0
 8000884:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	dst->can_write_data[6] = 0;
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	2200      	movs	r2, #0
 800088c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	dst->can_write_data[7] = 0;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	2200      	movs	r2, #0
 8000894:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
}
 8000898:	bf00      	nop
 800089a:	370c      	adds	r7, #12
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr

080008a4 <mw_ahrs_set_period>:

void mw_ahrs_set_period(MW_AHRS *dst, uint32_t time)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
 80008ac:	6039      	str	r1, [r7, #0]
	dst->can_write_data[0] = AC_OBJECT_WRITE_REQ + OT_INT32;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	2218      	movs	r2, #24
 80008b2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	dst->can_write_data[1] = SET_PERIOD;
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	2218      	movs	r2, #24
 80008ba:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	dst->can_write_data[2] = 0;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	2200      	movs	r2, #0
 80008c2:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	dst->can_write_data[3] = 0;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	2200      	movs	r2, #0
 80008ca:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	dst->can_write_data[4] = GET_LOWBYTE_16(GET_LOWWORD_32(time));
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	b2da      	uxtb	r2, r3
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	dst->can_write_data[5] = GET_HIGHBYTE_16(GET_LOWWORD_32(time));
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	0a1b      	lsrs	r3, r3, #8
 80008dc:	b2da      	uxtb	r2, r3
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	dst->can_write_data[6] = GET_LOWBYTE_16(GET_HIGHWORD_32(time));
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	0c1b      	lsrs	r3, r3, #16
 80008e8:	b2da      	uxtb	r2, r3
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	dst->can_write_data[7] = GET_HIGHBYTE_16(GET_HIGHWORD_32(time));
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	0c1b      	lsrs	r3, r3, #16
 80008f4:	0a1b      	lsrs	r3, r3, #8
 80008f6:	b2da      	uxtb	r2, r3
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
}
 80008fe:	bf00      	nop
 8000900:	370c      	adds	r7, #12
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
	...

0800090c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000910:	f000 fa6a 	bl	8000de8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000914:	f000 f812 	bl	800093c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000918:	f000 f8b8 	bl	8000a8c <MX_GPIO_Init>
  MX_CAN1_Init();
 800091c:	f000 f880 	bl	8000a20 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

   can_init_user();
 8000920:	f000 f8ea 	bl	8000af8 <can_init_user>

   HAL_CAN_ActivateNotification(&hcan1, CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO0_FULL);
 8000924:	2107      	movs	r1, #7
 8000926:	4804      	ldr	r0, [pc, #16]	; (8000938 <main+0x2c>)
 8000928:	f000 ff12 	bl	8001750 <HAL_CAN_ActivateNotification>
   HAL_CAN_Start(&hcan1);
 800092c:	4802      	ldr	r0, [pc, #8]	; (8000938 <main+0x2c>)
 800092e:	f000 fca9 	bl	8001284 <HAL_CAN_Start>

   mw_ahrsv1_trans();
 8000932:	f000 f90d 	bl	8000b50 <mw_ahrsv1_trans>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000936:	e7fe      	b.n	8000936 <main+0x2a>
 8000938:	200000b4 	.word	0x200000b4

0800093c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b094      	sub	sp, #80	; 0x50
 8000940:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000942:	f107 031c 	add.w	r3, r7, #28
 8000946:	2234      	movs	r2, #52	; 0x34
 8000948:	2100      	movs	r1, #0
 800094a:	4618      	mov	r0, r3
 800094c:	f002 fa2d 	bl	8002daa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000950:	f107 0308 	add.w	r3, r7, #8
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
 8000958:	605a      	str	r2, [r3, #4]
 800095a:	609a      	str	r2, [r3, #8]
 800095c:	60da      	str	r2, [r3, #12]
 800095e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000960:	2300      	movs	r3, #0
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	4b2c      	ldr	r3, [pc, #176]	; (8000a18 <SystemClock_Config+0xdc>)
 8000966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000968:	4a2b      	ldr	r2, [pc, #172]	; (8000a18 <SystemClock_Config+0xdc>)
 800096a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800096e:	6413      	str	r3, [r2, #64]	; 0x40
 8000970:	4b29      	ldr	r3, [pc, #164]	; (8000a18 <SystemClock_Config+0xdc>)
 8000972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000974:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000978:	607b      	str	r3, [r7, #4]
 800097a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800097c:	2300      	movs	r3, #0
 800097e:	603b      	str	r3, [r7, #0]
 8000980:	4b26      	ldr	r3, [pc, #152]	; (8000a1c <SystemClock_Config+0xe0>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a25      	ldr	r2, [pc, #148]	; (8000a1c <SystemClock_Config+0xe0>)
 8000986:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800098a:	6013      	str	r3, [r2, #0]
 800098c:	4b23      	ldr	r3, [pc, #140]	; (8000a1c <SystemClock_Config+0xe0>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000994:	603b      	str	r3, [r7, #0]
 8000996:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000998:	2301      	movs	r3, #1
 800099a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800099c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009a0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009a2:	2302      	movs	r3, #2
 80009a4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009aa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80009ac:	2308      	movs	r3, #8
 80009ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80009b0:	23b4      	movs	r3, #180	; 0xb4
 80009b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009b4:	2302      	movs	r3, #2
 80009b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80009b8:	2302      	movs	r3, #2
 80009ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009bc:	2302      	movs	r3, #2
 80009be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009c0:	f107 031c 	add.w	r3, r7, #28
 80009c4:	4618      	mov	r0, r3
 80009c6:	f001 fe8b 	bl	80026e0 <HAL_RCC_OscConfig>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80009d0:	f000 f91a 	bl	8000c08 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80009d4:	f001 fbb0 	bl	8002138 <HAL_PWREx_EnableOverDrive>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80009de:	f000 f913 	bl	8000c08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009e2:	230f      	movs	r3, #15
 80009e4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009e6:	2302      	movs	r3, #2
 80009e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ea:	2300      	movs	r3, #0
 80009ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009ee:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009f8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009fa:	f107 0308 	add.w	r3, r7, #8
 80009fe:	2105      	movs	r1, #5
 8000a00:	4618      	mov	r0, r3
 8000a02:	f001 fbe9 	bl	80021d8 <HAL_RCC_ClockConfig>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000a0c:	f000 f8fc 	bl	8000c08 <Error_Handler>
  }
}
 8000a10:	bf00      	nop
 8000a12:	3750      	adds	r7, #80	; 0x50
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	40023800 	.word	0x40023800
 8000a1c:	40007000 	.word	0x40007000

08000a20 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000a24:	4b17      	ldr	r3, [pc, #92]	; (8000a84 <MX_CAN1_Init+0x64>)
 8000a26:	4a18      	ldr	r2, [pc, #96]	; (8000a88 <MX_CAN1_Init+0x68>)
 8000a28:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 8000a2a:	4b16      	ldr	r3, [pc, #88]	; (8000a84 <MX_CAN1_Init+0x64>)
 8000a2c:	2209      	movs	r2, #9
 8000a2e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000a30:	4b14      	ldr	r3, [pc, #80]	; (8000a84 <MX_CAN1_Init+0x64>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a36:	4b13      	ldr	r3, [pc, #76]	; (8000a84 <MX_CAN1_Init+0x64>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 8000a3c:	4b11      	ldr	r3, [pc, #68]	; (8000a84 <MX_CAN1_Init+0x64>)
 8000a3e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000a42:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000a44:	4b0f      	ldr	r3, [pc, #60]	; (8000a84 <MX_CAN1_Init+0x64>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000a4a:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <MX_CAN1_Init+0x64>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000a50:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <MX_CAN1_Init+0x64>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000a56:	4b0b      	ldr	r3, [pc, #44]	; (8000a84 <MX_CAN1_Init+0x64>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000a5c:	4b09      	ldr	r3, [pc, #36]	; (8000a84 <MX_CAN1_Init+0x64>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000a62:	4b08      	ldr	r3, [pc, #32]	; (8000a84 <MX_CAN1_Init+0x64>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000a68:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <MX_CAN1_Init+0x64>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000a6e:	4805      	ldr	r0, [pc, #20]	; (8000a84 <MX_CAN1_Init+0x64>)
 8000a70:	f000 fa2c 	bl	8000ecc <HAL_CAN_Init>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8000a7a:	f000 f8c5 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	200000b4 	.word	0x200000b4
 8000a88:	40006400 	.word	0x40006400

08000a8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b085      	sub	sp, #20
 8000a90:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	60fb      	str	r3, [r7, #12]
 8000a96:	4b17      	ldr	r3, [pc, #92]	; (8000af4 <MX_GPIO_Init+0x68>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4a16      	ldr	r2, [pc, #88]	; (8000af4 <MX_GPIO_Init+0x68>)
 8000a9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa2:	4b14      	ldr	r3, [pc, #80]	; (8000af4 <MX_GPIO_Init+0x68>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	60bb      	str	r3, [r7, #8]
 8000ab2:	4b10      	ldr	r3, [pc, #64]	; (8000af4 <MX_GPIO_Init+0x68>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a0f      	ldr	r2, [pc, #60]	; (8000af4 <MX_GPIO_Init+0x68>)
 8000ab8:	f043 0301 	orr.w	r3, r3, #1
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b0d      	ldr	r3, [pc, #52]	; (8000af4 <MX_GPIO_Init+0x68>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f003 0301 	and.w	r3, r3, #1
 8000ac6:	60bb      	str	r3, [r7, #8]
 8000ac8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	607b      	str	r3, [r7, #4]
 8000ace:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <MX_GPIO_Init+0x68>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	4a08      	ldr	r2, [pc, #32]	; (8000af4 <MX_GPIO_Init+0x68>)
 8000ad4:	f043 0302 	orr.w	r3, r3, #2
 8000ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ada:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <MX_GPIO_Init+0x68>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	f003 0302 	and.w	r3, r3, #2
 8000ae2:	607b      	str	r3, [r7, #4]
 8000ae4:	687b      	ldr	r3, [r7, #4]

}
 8000ae6:	bf00      	nop
 8000ae8:	3714      	adds	r7, #20
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	40023800 	.word	0x40023800

08000af8 <can_init_user>:
	sendData[8] = (0xFF
			- ((id + 5 + AX_WRITE_DATA + regstart + (data & 0xFF)
					+ ((data & 0xFF00) >> 8)) % 256));
}

void can_init_user(void) {
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08a      	sub	sp, #40	; 0x28
 8000afc:	af00      	add	r7, sp, #0

	CAN_FilterTypeDef sFilterConfig;

	sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000afe:	2300      	movs	r3, #0
 8000b00:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000b02:	2300      	movs	r3, #0
 8000b04:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000b06:	2301      	movs	r3, #1
 8000b08:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = 0x0000 << 5;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000 << 5;
 8000b12:	2300      	movs	r3, #0
 8000b14:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 8000b16:	2300      	movs	r3, #0
 8000b18:	60fb      	str	r3, [r7, #12]
	sFilterConfig.SlaveStartFilterBank = 0;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.FilterBank = 0;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 8000b22:	2301      	movs	r3, #1
 8000b24:	623b      	str	r3, [r7, #32]

	 HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 8000b26:	463b      	mov	r3, r7
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4808      	ldr	r0, [pc, #32]	; (8000b4c <can_init_user+0x54>)
 8000b2c:	f000 faca 	bl	80010c4 <HAL_CAN_ConfigFilter>

	if(HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK){
 8000b30:	463b      	mov	r3, r7
 8000b32:	4619      	mov	r1, r3
 8000b34:	4805      	ldr	r0, [pc, #20]	; (8000b4c <can_init_user+0x54>)
 8000b36:	f000 fac5 	bl	80010c4 <HAL_CAN_ConfigFilter>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <can_init_user+0x4c>
		Error_Handler();
 8000b40:	f000 f862 	bl	8000c08 <Error_Handler>
	}
}
 8000b44:	bf00      	nop
 8000b46:	3728      	adds	r7, #40	; 0x28
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	200000b4 	.word	0x200000b4

08000b50 <mw_ahrsv1_trans>:

uint32_t txMailBox;
void mw_ahrsv1_trans(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af02      	add	r7, sp, #8
	txheader.StdId = 0x01;
 8000b56:	4b17      	ldr	r3, [pc, #92]	; (8000bb4 <mw_ahrsv1_trans+0x64>)
 8000b58:	2201      	movs	r2, #1
 8000b5a:	601a      	str	r2, [r3, #0]
	txheader.ExtId = 0x01;
 8000b5c:	4b15      	ldr	r3, [pc, #84]	; (8000bb4 <mw_ahrsv1_trans+0x64>)
 8000b5e:	2201      	movs	r2, #1
 8000b60:	605a      	str	r2, [r3, #4]
	txheader.RTR = CAN_RTR_DATA;
 8000b62:	4b14      	ldr	r3, [pc, #80]	; (8000bb4 <mw_ahrsv1_trans+0x64>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	60da      	str	r2, [r3, #12]
	txheader.IDE = CAN_ID_STD;
 8000b68:	4b12      	ldr	r3, [pc, #72]	; (8000bb4 <mw_ahrsv1_trans+0x64>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	609a      	str	r2, [r3, #8]
	txheader.DLC = 8;
 8000b6e:	4b11      	ldr	r3, [pc, #68]	; (8000bb4 <mw_ahrsv1_trans+0x64>)
 8000b70:	2208      	movs	r2, #8
 8000b72:	611a      	str	r2, [r3, #16]

	mw_ahrs_set_period(&ahrs_obj, 1);
 8000b74:	2101      	movs	r1, #1
 8000b76:	4810      	ldr	r0, [pc, #64]	; (8000bb8 <mw_ahrsv1_trans+0x68>)
 8000b78:	f7ff fe94 	bl	80008a4 <mw_ahrs_set_period>
	mw_ahrs_set_data_type(&ahrs_obj, 1, 1, 1, 1);
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	9300      	str	r3, [sp, #0]
 8000b80:	2301      	movs	r3, #1
 8000b82:	2201      	movs	r2, #1
 8000b84:	2101      	movs	r1, #1
 8000b86:	480c      	ldr	r0, [pc, #48]	; (8000bb8 <mw_ahrsv1_trans+0x68>)
 8000b88:	f7ff fe4a 	bl	8000820 <mw_ahrs_set_data_type>

	txMailBox = HAL_CAN_GetTxMailboxesFreeLevel(&hcan1);
 8000b8c:	480b      	ldr	r0, [pc, #44]	; (8000bbc <mw_ahrsv1_trans+0x6c>)
 8000b8e:	f000 fc98 	bl	80014c2 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000b92:	4602      	mov	r2, r0
 8000b94:	4b0a      	ldr	r3, [pc, #40]	; (8000bc0 <mw_ahrsv1_trans+0x70>)
 8000b96:	601a      	str	r2, [r3, #0]
	if (HAL_CAN_AddTxMessage(&hcan1, &txheader, ahrs_obj.can_write_data, &txMailBox)
 8000b98:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <mw_ahrsv1_trans+0x70>)
 8000b9a:	4a0a      	ldr	r2, [pc, #40]	; (8000bc4 <mw_ahrsv1_trans+0x74>)
 8000b9c:	4905      	ldr	r1, [pc, #20]	; (8000bb4 <mw_ahrsv1_trans+0x64>)
 8000b9e:	4807      	ldr	r0, [pc, #28]	; (8000bbc <mw_ahrsv1_trans+0x6c>)
 8000ba0:	f000 fbb4 	bl	800130c <HAL_CAN_AddTxMessage>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <mw_ahrsv1_trans+0x5e>
			!= HAL_OK) {
		Error_Handler();
 8000baa:	f000 f82d 	bl	8000c08 <Error_Handler>
	}
}
 8000bae:	bf00      	nop
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	20000098 	.word	0x20000098
 8000bb8:	20000030 	.word	0x20000030
 8000bbc:	200000b4 	.word	0x200000b4
 8000bc0:	20000090 	.word	0x20000090
 8000bc4:	20000078 	.word	0x20000078

08000bc8 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
	if (hcan->Instance == CAN1) {
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a07      	ldr	r2, [pc, #28]	; (8000bf4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d108      	bne.n	8000bec <HAL_CAN_RxFifo0MsgPendingCallback+0x24>

		HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &rxheader, ahrs_obj.can_read_data);
 8000bda:	4b07      	ldr	r3, [pc, #28]	; (8000bf8 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000bdc:	4a07      	ldr	r2, [pc, #28]	; (8000bfc <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000bde:	2100      	movs	r1, #0
 8000be0:	4807      	ldr	r0, [pc, #28]	; (8000c00 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8000be2:	f000 fca3 	bl	800152c <HAL_CAN_GetRxMessage>
		mw_ahrs_input_data(&ahrs_obj);
 8000be6:	4807      	ldr	r0, [pc, #28]	; (8000c04 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8000be8:	f7ff fc8c 	bl	8000504 <mw_ahrs_input_data>
	}
}
 8000bec:	bf00      	nop
 8000bee:	3708      	adds	r7, #8
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	40006400 	.word	0x40006400
 8000bf8:	20000080 	.word	0x20000080
 8000bfc:	200000dc 	.word	0x200000dc
 8000c00:	200000b4 	.word	0x200000b4
 8000c04:	20000030 	.word	0x20000030

08000c08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c0c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c0e:	e7fe      	b.n	8000c0e <Error_Handler+0x6>

08000c10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	607b      	str	r3, [r7, #4]
 8000c1a:	4b10      	ldr	r3, [pc, #64]	; (8000c5c <HAL_MspInit+0x4c>)
 8000c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1e:	4a0f      	ldr	r2, [pc, #60]	; (8000c5c <HAL_MspInit+0x4c>)
 8000c20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c24:	6453      	str	r3, [r2, #68]	; 0x44
 8000c26:	4b0d      	ldr	r3, [pc, #52]	; (8000c5c <HAL_MspInit+0x4c>)
 8000c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c2e:	607b      	str	r3, [r7, #4]
 8000c30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	603b      	str	r3, [r7, #0]
 8000c36:	4b09      	ldr	r3, [pc, #36]	; (8000c5c <HAL_MspInit+0x4c>)
 8000c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3a:	4a08      	ldr	r2, [pc, #32]	; (8000c5c <HAL_MspInit+0x4c>)
 8000c3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c40:	6413      	str	r3, [r2, #64]	; 0x40
 8000c42:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <HAL_MspInit+0x4c>)
 8000c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c4a:	603b      	str	r3, [r7, #0]
 8000c4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	370c      	adds	r7, #12
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	40023800 	.word	0x40023800

08000c60 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b08a      	sub	sp, #40	; 0x28
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c68:	f107 0314 	add.w	r3, r7, #20
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	609a      	str	r2, [r3, #8]
 8000c74:	60da      	str	r2, [r3, #12]
 8000c76:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a1d      	ldr	r2, [pc, #116]	; (8000cf4 <HAL_CAN_MspInit+0x94>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d134      	bne.n	8000cec <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	613b      	str	r3, [r7, #16]
 8000c86:	4b1c      	ldr	r3, [pc, #112]	; (8000cf8 <HAL_CAN_MspInit+0x98>)
 8000c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8a:	4a1b      	ldr	r2, [pc, #108]	; (8000cf8 <HAL_CAN_MspInit+0x98>)
 8000c8c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c90:	6413      	str	r3, [r2, #64]	; 0x40
 8000c92:	4b19      	ldr	r3, [pc, #100]	; (8000cf8 <HAL_CAN_MspInit+0x98>)
 8000c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c9a:	613b      	str	r3, [r7, #16]
 8000c9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60fb      	str	r3, [r7, #12]
 8000ca2:	4b15      	ldr	r3, [pc, #84]	; (8000cf8 <HAL_CAN_MspInit+0x98>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	4a14      	ldr	r2, [pc, #80]	; (8000cf8 <HAL_CAN_MspInit+0x98>)
 8000ca8:	f043 0302 	orr.w	r3, r3, #2
 8000cac:	6313      	str	r3, [r2, #48]	; 0x30
 8000cae:	4b12      	ldr	r3, [pc, #72]	; (8000cf8 <HAL_CAN_MspInit+0x98>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	f003 0302 	and.w	r3, r3, #2
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000cba:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc8:	2303      	movs	r3, #3
 8000cca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000ccc:	2309      	movs	r3, #9
 8000cce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd0:	f107 0314 	add.w	r3, r7, #20
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4809      	ldr	r0, [pc, #36]	; (8000cfc <HAL_CAN_MspInit+0x9c>)
 8000cd8:	f001 f89c 	bl	8001e14 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000cdc:	2200      	movs	r2, #0
 8000cde:	2100      	movs	r1, #0
 8000ce0:	2014      	movs	r0, #20
 8000ce2:	f001 f860 	bl	8001da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000ce6:	2014      	movs	r0, #20
 8000ce8:	f001 f879 	bl	8001dde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000cec:	bf00      	nop
 8000cee:	3728      	adds	r7, #40	; 0x28
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	40006400 	.word	0x40006400
 8000cf8:	40023800 	.word	0x40023800
 8000cfc:	40020400 	.word	0x40020400

08000d00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d04:	e7fe      	b.n	8000d04 <NMI_Handler+0x4>

08000d06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d0a:	e7fe      	b.n	8000d0a <HardFault_Handler+0x4>

08000d0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d10:	e7fe      	b.n	8000d10 <MemManage_Handler+0x4>

08000d12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d16:	e7fe      	b.n	8000d16 <BusFault_Handler+0x4>

08000d18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d1c:	e7fe      	b.n	8000d1c <UsageFault_Handler+0x4>

08000d1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d22:	bf00      	nop
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr

08000d2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr

08000d3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr

08000d48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d4c:	f000 f89e 	bl	8000e8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d50:	bf00      	nop
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000d58:	4802      	ldr	r0, [pc, #8]	; (8000d64 <CAN1_RX0_IRQHandler+0x10>)
 8000d5a:	f000 fd1f 	bl	800179c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	200000b4 	.word	0x200000b4

08000d68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d6c:	4b08      	ldr	r3, [pc, #32]	; (8000d90 <SystemInit+0x28>)
 8000d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d72:	4a07      	ldr	r2, [pc, #28]	; (8000d90 <SystemInit+0x28>)
 8000d74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d7c:	4b04      	ldr	r3, [pc, #16]	; (8000d90 <SystemInit+0x28>)
 8000d7e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d82:	609a      	str	r2, [r3, #8]
#endif
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	e000ed00 	.word	0xe000ed00

08000d94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dcc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000d98:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000d9a:	e003      	b.n	8000da4 <LoopCopyDataInit>

08000d9c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000d9c:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000d9e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000da0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000da2:	3104      	adds	r1, #4

08000da4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000da4:	480b      	ldr	r0, [pc, #44]	; (8000dd4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000da6:	4b0c      	ldr	r3, [pc, #48]	; (8000dd8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000da8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000daa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000dac:	d3f6      	bcc.n	8000d9c <CopyDataInit>
  ldr  r2, =_sbss
 8000dae:	4a0b      	ldr	r2, [pc, #44]	; (8000ddc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000db0:	e002      	b.n	8000db8 <LoopFillZerobss>

08000db2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000db2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000db4:	f842 3b04 	str.w	r3, [r2], #4

08000db8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000db8:	4b09      	ldr	r3, [pc, #36]	; (8000de0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000dba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000dbc:	d3f9      	bcc.n	8000db2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000dbe:	f7ff ffd3 	bl	8000d68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dc2:	f001 ffc3 	bl	8002d4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dc6:	f7ff fda1 	bl	800090c <main>
  bx  lr    
 8000dca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000dcc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000dd0:	08002e14 	.word	0x08002e14
  ldr  r0, =_sdata
 8000dd4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000dd8:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000ddc:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000de0:	200000fc 	.word	0x200000fc

08000de4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000de4:	e7fe      	b.n	8000de4 <ADC_IRQHandler>
	...

08000de8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dec:	4b0e      	ldr	r3, [pc, #56]	; (8000e28 <HAL_Init+0x40>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a0d      	ldr	r2, [pc, #52]	; (8000e28 <HAL_Init+0x40>)
 8000df2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000df6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000df8:	4b0b      	ldr	r3, [pc, #44]	; (8000e28 <HAL_Init+0x40>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a0a      	ldr	r2, [pc, #40]	; (8000e28 <HAL_Init+0x40>)
 8000dfe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e04:	4b08      	ldr	r3, [pc, #32]	; (8000e28 <HAL_Init+0x40>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a07      	ldr	r2, [pc, #28]	; (8000e28 <HAL_Init+0x40>)
 8000e0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e10:	2003      	movs	r0, #3
 8000e12:	f000 ffbd 	bl	8001d90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e16:	2000      	movs	r0, #0
 8000e18:	f000 f808 	bl	8000e2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e1c:	f7ff fef8 	bl	8000c10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e20:	2300      	movs	r3, #0
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40023c00 	.word	0x40023c00

08000e2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e34:	4b12      	ldr	r3, [pc, #72]	; (8000e80 <HAL_InitTick+0x54>)
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	4b12      	ldr	r3, [pc, #72]	; (8000e84 <HAL_InitTick+0x58>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f000 ffd5 	bl	8001dfa <HAL_SYSTICK_Config>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
 8000e58:	e00e      	b.n	8000e78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2b0f      	cmp	r3, #15
 8000e5e:	d80a      	bhi.n	8000e76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e60:	2200      	movs	r2, #0
 8000e62:	6879      	ldr	r1, [r7, #4]
 8000e64:	f04f 30ff 	mov.w	r0, #4294967295
 8000e68:	f000 ff9d 	bl	8001da6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e6c:	4a06      	ldr	r2, [pc, #24]	; (8000e88 <HAL_InitTick+0x5c>)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e72:	2300      	movs	r3, #0
 8000e74:	e000      	b.n	8000e78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3708      	adds	r7, #8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	20000000 	.word	0x20000000
 8000e84:	20000008 	.word	0x20000008
 8000e88:	20000004 	.word	0x20000004

08000e8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e90:	4b06      	ldr	r3, [pc, #24]	; (8000eac <HAL_IncTick+0x20>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	461a      	mov	r2, r3
 8000e96:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <HAL_IncTick+0x24>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4413      	add	r3, r2
 8000e9c:	4a04      	ldr	r2, [pc, #16]	; (8000eb0 <HAL_IncTick+0x24>)
 8000e9e:	6013      	str	r3, [r2, #0]
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	20000008 	.word	0x20000008
 8000eb0:	200000f8 	.word	0x200000f8

08000eb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000eb8:	4b03      	ldr	r3, [pc, #12]	; (8000ec8 <HAL_GetTick+0x14>)
 8000eba:	681b      	ldr	r3, [r3, #0]
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	200000f8 	.word	0x200000f8

08000ecc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d101      	bne.n	8000ede <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	e0ed      	b.n	80010ba <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d102      	bne.n	8000ef0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	f7ff feb8 	bl	8000c60 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f022 0202 	bic.w	r2, r2, #2
 8000efe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f00:	f7ff ffd8 	bl	8000eb4 <HAL_GetTick>
 8000f04:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000f06:	e012      	b.n	8000f2e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f08:	f7ff ffd4 	bl	8000eb4 <HAL_GetTick>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	2b0a      	cmp	r3, #10
 8000f14:	d90b      	bls.n	8000f2e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f1a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2205      	movs	r2, #5
 8000f26:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e0c5      	b.n	80010ba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f003 0302 	and.w	r3, r3, #2
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d1e5      	bne.n	8000f08 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f042 0201 	orr.w	r2, r2, #1
 8000f4a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f4c:	f7ff ffb2 	bl	8000eb4 <HAL_GetTick>
 8000f50:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000f52:	e012      	b.n	8000f7a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f54:	f7ff ffae 	bl	8000eb4 <HAL_GetTick>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	2b0a      	cmp	r3, #10
 8000f60:	d90b      	bls.n	8000f7a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f66:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2205      	movs	r2, #5
 8000f72:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
 8000f78:	e09f      	b.n	80010ba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f003 0301 	and.w	r3, r3, #1
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d0e5      	beq.n	8000f54 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	7e1b      	ldrb	r3, [r3, #24]
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	d108      	bne.n	8000fa2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	e007      	b.n	8000fb2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000fb0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	7e5b      	ldrb	r3, [r3, #25]
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d108      	bne.n	8000fcc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000fc8:	601a      	str	r2, [r3, #0]
 8000fca:	e007      	b.n	8000fdc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000fda:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	7e9b      	ldrb	r3, [r3, #26]
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d108      	bne.n	8000ff6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f042 0220 	orr.w	r2, r2, #32
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	e007      	b.n	8001006 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f022 0220 	bic.w	r2, r2, #32
 8001004:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	7edb      	ldrb	r3, [r3, #27]
 800100a:	2b01      	cmp	r3, #1
 800100c:	d108      	bne.n	8001020 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f022 0210 	bic.w	r2, r2, #16
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	e007      	b.n	8001030 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f042 0210 	orr.w	r2, r2, #16
 800102e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	7f1b      	ldrb	r3, [r3, #28]
 8001034:	2b01      	cmp	r3, #1
 8001036:	d108      	bne.n	800104a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f042 0208 	orr.w	r2, r2, #8
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	e007      	b.n	800105a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f022 0208 	bic.w	r2, r2, #8
 8001058:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	7f5b      	ldrb	r3, [r3, #29]
 800105e:	2b01      	cmp	r3, #1
 8001060:	d108      	bne.n	8001074 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f042 0204 	orr.w	r2, r2, #4
 8001070:	601a      	str	r2, [r3, #0]
 8001072:	e007      	b.n	8001084 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f022 0204 	bic.w	r2, r2, #4
 8001082:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	689a      	ldr	r2, [r3, #8]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	431a      	orrs	r2, r3
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	691b      	ldr	r3, [r3, #16]
 8001092:	431a      	orrs	r2, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	695b      	ldr	r3, [r3, #20]
 8001098:	ea42 0103 	orr.w	r1, r2, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	1e5a      	subs	r2, r3, #1
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	430a      	orrs	r2, r1
 80010a8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2200      	movs	r2, #0
 80010ae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2201      	movs	r2, #1
 80010b4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80010b8:	2300      	movs	r3, #0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
	...

080010c4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b087      	sub	sp, #28
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010da:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80010dc:	7cfb      	ldrb	r3, [r7, #19]
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d003      	beq.n	80010ea <HAL_CAN_ConfigFilter+0x26>
 80010e2:	7cfb      	ldrb	r3, [r7, #19]
 80010e4:	2b02      	cmp	r3, #2
 80010e6:	f040 80be 	bne.w	8001266 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80010ea:	4b65      	ldr	r3, [pc, #404]	; (8001280 <HAL_CAN_ConfigFilter+0x1bc>)
 80010ec:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80010f4:	f043 0201 	orr.w	r2, r3, #1
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001104:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001118:	021b      	lsls	r3, r3, #8
 800111a:	431a      	orrs	r2, r3
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	695b      	ldr	r3, [r3, #20]
 8001126:	f003 031f 	and.w	r3, r3, #31
 800112a:	2201      	movs	r2, #1
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	43db      	mvns	r3, r3
 800113c:	401a      	ands	r2, r3
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	69db      	ldr	r3, [r3, #28]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d123      	bne.n	8001194 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	43db      	mvns	r3, r3
 8001156:	401a      	ands	r2, r3
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	68db      	ldr	r3, [r3, #12]
 8001162:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800116a:	683a      	ldr	r2, [r7, #0]
 800116c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800116e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	3248      	adds	r2, #72	; 0x48
 8001174:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001188:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800118a:	6979      	ldr	r1, [r7, #20]
 800118c:	3348      	adds	r3, #72	; 0x48
 800118e:	00db      	lsls	r3, r3, #3
 8001190:	440b      	add	r3, r1
 8001192:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	69db      	ldr	r3, [r3, #28]
 8001198:	2b01      	cmp	r3, #1
 800119a:	d122      	bne.n	80011e2 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	431a      	orrs	r2, r3
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80011b8:	683a      	ldr	r2, [r7, #0]
 80011ba:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80011bc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	3248      	adds	r2, #72	; 0x48
 80011c2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80011d6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80011d8:	6979      	ldr	r1, [r7, #20]
 80011da:	3348      	adds	r3, #72	; 0x48
 80011dc:	00db      	lsls	r3, r3, #3
 80011de:	440b      	add	r3, r1
 80011e0:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	699b      	ldr	r3, [r3, #24]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d109      	bne.n	80011fe <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	43db      	mvns	r3, r3
 80011f4:	401a      	ands	r2, r3
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80011fc:	e007      	b.n	800120e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	431a      	orrs	r2, r3
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	691b      	ldr	r3, [r3, #16]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d109      	bne.n	800122a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	43db      	mvns	r3, r3
 8001220:	401a      	ands	r2, r3
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001228:	e007      	b.n	800123a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	431a      	orrs	r2, r3
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	6a1b      	ldr	r3, [r3, #32]
 800123e:	2b01      	cmp	r3, #1
 8001240:	d107      	bne.n	8001252 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	431a      	orrs	r2, r3
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001258:	f023 0201 	bic.w	r2, r3, #1
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001262:	2300      	movs	r3, #0
 8001264:	e006      	b.n	8001274 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800126a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
  }
}
 8001274:	4618      	mov	r0, r3
 8001276:	371c      	adds	r7, #28
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	40006400 	.word	0x40006400

08001284 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001292:	b2db      	uxtb	r3, r3
 8001294:	2b01      	cmp	r3, #1
 8001296:	d12e      	bne.n	80012f6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2202      	movs	r2, #2
 800129c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f022 0201 	bic.w	r2, r2, #1
 80012ae:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80012b0:	f7ff fe00 	bl	8000eb4 <HAL_GetTick>
 80012b4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80012b6:	e012      	b.n	80012de <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80012b8:	f7ff fdfc 	bl	8000eb4 <HAL_GetTick>
 80012bc:	4602      	mov	r2, r0
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	2b0a      	cmp	r3, #10
 80012c4:	d90b      	bls.n	80012de <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2205      	movs	r2, #5
 80012d6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e012      	b.n	8001304 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f003 0301 	and.w	r3, r3, #1
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d1e5      	bne.n	80012b8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2200      	movs	r2, #0
 80012f0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80012f2:	2300      	movs	r3, #0
 80012f4:	e006      	b.n	8001304 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012fa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
  }
}
 8001304:	4618      	mov	r0, r3
 8001306:	3710      	adds	r7, #16
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800130c:	b480      	push	{r7}
 800130e:	b089      	sub	sp, #36	; 0x24
 8001310:	af00      	add	r7, sp, #0
 8001312:	60f8      	str	r0, [r7, #12]
 8001314:	60b9      	str	r1, [r7, #8]
 8001316:	607a      	str	r2, [r7, #4]
 8001318:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001320:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800132a:	7ffb      	ldrb	r3, [r7, #31]
 800132c:	2b01      	cmp	r3, #1
 800132e:	d003      	beq.n	8001338 <HAL_CAN_AddTxMessage+0x2c>
 8001330:	7ffb      	ldrb	r3, [r7, #31]
 8001332:	2b02      	cmp	r3, #2
 8001334:	f040 80b8 	bne.w	80014a8 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d10a      	bne.n	8001358 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001348:	2b00      	cmp	r3, #0
 800134a:	d105      	bne.n	8001358 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001352:	2b00      	cmp	r3, #0
 8001354:	f000 80a0 	beq.w	8001498 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	0e1b      	lsrs	r3, r3, #24
 800135c:	f003 0303 	and.w	r3, r3, #3
 8001360:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	2b02      	cmp	r3, #2
 8001366:	d907      	bls.n	8001378 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800136c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001374:	2301      	movs	r3, #1
 8001376:	e09e      	b.n	80014b6 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001378:	2201      	movs	r2, #1
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	409a      	lsls	r2, r3
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d10d      	bne.n	80013a6 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001394:	68f9      	ldr	r1, [r7, #12]
 8001396:	6809      	ldr	r1, [r1, #0]
 8001398:	431a      	orrs	r2, r3
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	3318      	adds	r3, #24
 800139e:	011b      	lsls	r3, r3, #4
 80013a0:	440b      	add	r3, r1
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	e00f      	b.n	80013c6 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80013b0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80013b6:	68f9      	ldr	r1, [r7, #12]
 80013b8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80013ba:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	3318      	adds	r3, #24
 80013c0:	011b      	lsls	r3, r3, #4
 80013c2:	440b      	add	r3, r1
 80013c4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	6819      	ldr	r1, [r3, #0]
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	691a      	ldr	r2, [r3, #16]
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	3318      	adds	r3, #24
 80013d2:	011b      	lsls	r3, r3, #4
 80013d4:	440b      	add	r3, r1
 80013d6:	3304      	adds	r3, #4
 80013d8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	7d1b      	ldrb	r3, [r3, #20]
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d111      	bne.n	8001406 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	3318      	adds	r3, #24
 80013ea:	011b      	lsls	r3, r3, #4
 80013ec:	4413      	add	r3, r2
 80013ee:	3304      	adds	r3, #4
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	68fa      	ldr	r2, [r7, #12]
 80013f4:	6811      	ldr	r1, [r2, #0]
 80013f6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	3318      	adds	r3, #24
 80013fe:	011b      	lsls	r3, r3, #4
 8001400:	440b      	add	r3, r1
 8001402:	3304      	adds	r3, #4
 8001404:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	3307      	adds	r3, #7
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	061a      	lsls	r2, r3, #24
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	3306      	adds	r3, #6
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	041b      	lsls	r3, r3, #16
 8001416:	431a      	orrs	r2, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	3305      	adds	r3, #5
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	021b      	lsls	r3, r3, #8
 8001420:	4313      	orrs	r3, r2
 8001422:	687a      	ldr	r2, [r7, #4]
 8001424:	3204      	adds	r2, #4
 8001426:	7812      	ldrb	r2, [r2, #0]
 8001428:	4610      	mov	r0, r2
 800142a:	68fa      	ldr	r2, [r7, #12]
 800142c:	6811      	ldr	r1, [r2, #0]
 800142e:	ea43 0200 	orr.w	r2, r3, r0
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	011b      	lsls	r3, r3, #4
 8001436:	440b      	add	r3, r1
 8001438:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800143c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	3303      	adds	r3, #3
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	061a      	lsls	r2, r3, #24
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	3302      	adds	r3, #2
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	041b      	lsls	r3, r3, #16
 800144e:	431a      	orrs	r2, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	3301      	adds	r3, #1
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	021b      	lsls	r3, r3, #8
 8001458:	4313      	orrs	r3, r2
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	7812      	ldrb	r2, [r2, #0]
 800145e:	4610      	mov	r0, r2
 8001460:	68fa      	ldr	r2, [r7, #12]
 8001462:	6811      	ldr	r1, [r2, #0]
 8001464:	ea43 0200 	orr.w	r2, r3, r0
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	011b      	lsls	r3, r3, #4
 800146c:	440b      	add	r3, r1
 800146e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001472:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	3318      	adds	r3, #24
 800147c:	011b      	lsls	r3, r3, #4
 800147e:	4413      	add	r3, r2
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	68fa      	ldr	r2, [r7, #12]
 8001484:	6811      	ldr	r1, [r2, #0]
 8001486:	f043 0201 	orr.w	r2, r3, #1
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	3318      	adds	r3, #24
 800148e:	011b      	lsls	r3, r3, #4
 8001490:	440b      	add	r3, r1
 8001492:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001494:	2300      	movs	r3, #0
 8001496:	e00e      	b.n	80014b6 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800149c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80014a4:	2301      	movs	r3, #1
 80014a6:	e006      	b.n	80014b6 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ac:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
  }
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3724      	adds	r7, #36	; 0x24
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr

080014c2 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 80014c2:	b480      	push	{r7}
 80014c4:	b085      	sub	sp, #20
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80014ca:	2300      	movs	r3, #0
 80014cc:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014d4:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80014d6:	7afb      	ldrb	r3, [r7, #11]
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d002      	beq.n	80014e2 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80014dc:	7afb      	ldrb	r3, [r7, #11]
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d11d      	bne.n	800151e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d002      	beq.n	80014f6 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	3301      	adds	r3, #1
 80014f4:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001500:	2b00      	cmp	r3, #0
 8001502:	d002      	beq.n	800150a <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	3301      	adds	r3, #1
 8001508:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001514:	2b00      	cmp	r3, #0
 8001516:	d002      	beq.n	800151e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	3301      	adds	r3, #1
 800151c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800151e:	68fb      	ldr	r3, [r7, #12]
}
 8001520:	4618      	mov	r0, r3
 8001522:	3714      	adds	r7, #20
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800152c:	b480      	push	{r7}
 800152e:	b087      	sub	sp, #28
 8001530:	af00      	add	r7, sp, #0
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	60b9      	str	r1, [r7, #8]
 8001536:	607a      	str	r2, [r7, #4]
 8001538:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001540:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001542:	7dfb      	ldrb	r3, [r7, #23]
 8001544:	2b01      	cmp	r3, #1
 8001546:	d003      	beq.n	8001550 <HAL_CAN_GetRxMessage+0x24>
 8001548:	7dfb      	ldrb	r3, [r7, #23]
 800154a:	2b02      	cmp	r3, #2
 800154c:	f040 80f3 	bne.w	8001736 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d10e      	bne.n	8001574 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	f003 0303 	and.w	r3, r3, #3
 8001560:	2b00      	cmp	r3, #0
 8001562:	d116      	bne.n	8001592 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001568:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e0e7      	b.n	8001744 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	691b      	ldr	r3, [r3, #16]
 800157a:	f003 0303 	and.w	r3, r3, #3
 800157e:	2b00      	cmp	r3, #0
 8001580:	d107      	bne.n	8001592 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001586:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e0d8      	b.n	8001744 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	331b      	adds	r3, #27
 800159a:	011b      	lsls	r3, r3, #4
 800159c:	4413      	add	r3, r2
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0204 	and.w	r2, r3, #4
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d10c      	bne.n	80015ca <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	331b      	adds	r3, #27
 80015b8:	011b      	lsls	r3, r3, #4
 80015ba:	4413      	add	r3, r2
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	0d5b      	lsrs	r3, r3, #21
 80015c0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	e00b      	b.n	80015e2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	331b      	adds	r3, #27
 80015d2:	011b      	lsls	r3, r3, #4
 80015d4:	4413      	add	r3, r2
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	08db      	lsrs	r3, r3, #3
 80015da:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	331b      	adds	r3, #27
 80015ea:	011b      	lsls	r3, r3, #4
 80015ec:	4413      	add	r3, r2
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0202 	and.w	r2, r3, #2
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	331b      	adds	r3, #27
 8001600:	011b      	lsls	r3, r3, #4
 8001602:	4413      	add	r3, r2
 8001604:	3304      	adds	r3, #4
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 020f 	and.w	r2, r3, #15
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	331b      	adds	r3, #27
 8001618:	011b      	lsls	r3, r3, #4
 800161a:	4413      	add	r3, r2
 800161c:	3304      	adds	r3, #4
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	0a1b      	lsrs	r3, r3, #8
 8001622:	b2da      	uxtb	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	331b      	adds	r3, #27
 8001630:	011b      	lsls	r3, r3, #4
 8001632:	4413      	add	r3, r2
 8001634:	3304      	adds	r3, #4
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	0c1b      	lsrs	r3, r3, #16
 800163a:	b29a      	uxth	r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	011b      	lsls	r3, r3, #4
 8001648:	4413      	add	r3, r2
 800164a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	b2da      	uxtb	r2, r3
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	011b      	lsls	r3, r3, #4
 800165e:	4413      	add	r3, r2
 8001660:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	0a1a      	lsrs	r2, r3, #8
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	3301      	adds	r3, #1
 800166c:	b2d2      	uxtb	r2, r2
 800166e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	011b      	lsls	r3, r3, #4
 8001678:	4413      	add	r3, r2
 800167a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	0c1a      	lsrs	r2, r3, #16
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	3302      	adds	r3, #2
 8001686:	b2d2      	uxtb	r2, r2
 8001688:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	011b      	lsls	r3, r3, #4
 8001692:	4413      	add	r3, r2
 8001694:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	0e1a      	lsrs	r2, r3, #24
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	3303      	adds	r3, #3
 80016a0:	b2d2      	uxtb	r2, r2
 80016a2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	011b      	lsls	r3, r3, #4
 80016ac:	4413      	add	r3, r2
 80016ae:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	3304      	adds	r3, #4
 80016b8:	b2d2      	uxtb	r2, r2
 80016ba:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	011b      	lsls	r3, r3, #4
 80016c4:	4413      	add	r3, r2
 80016c6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	0a1a      	lsrs	r2, r3, #8
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	3305      	adds	r3, #5
 80016d2:	b2d2      	uxtb	r2, r2
 80016d4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	011b      	lsls	r3, r3, #4
 80016de:	4413      	add	r3, r2
 80016e0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	0c1a      	lsrs	r2, r3, #16
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	3306      	adds	r3, #6
 80016ec:	b2d2      	uxtb	r2, r2
 80016ee:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	011b      	lsls	r3, r3, #4
 80016f8:	4413      	add	r3, r2
 80016fa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	0e1a      	lsrs	r2, r3, #24
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	3307      	adds	r3, #7
 8001706:	b2d2      	uxtb	r2, r2
 8001708:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d108      	bne.n	8001722 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	68da      	ldr	r2, [r3, #12]
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f042 0220 	orr.w	r2, r2, #32
 800171e:	60da      	str	r2, [r3, #12]
 8001720:	e007      	b.n	8001732 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	691a      	ldr	r2, [r3, #16]
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f042 0220 	orr.w	r2, r2, #32
 8001730:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001732:	2300      	movs	r3, #0
 8001734:	e006      	b.n	8001744 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
  }
}
 8001744:	4618      	mov	r0, r3
 8001746:	371c      	adds	r7, #28
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001750:	b480      	push	{r7}
 8001752:	b085      	sub	sp, #20
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001760:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001762:	7bfb      	ldrb	r3, [r7, #15]
 8001764:	2b01      	cmp	r3, #1
 8001766:	d002      	beq.n	800176e <HAL_CAN_ActivateNotification+0x1e>
 8001768:	7bfb      	ldrb	r3, [r7, #15]
 800176a:	2b02      	cmp	r3, #2
 800176c:	d109      	bne.n	8001782 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	6959      	ldr	r1, [r3, #20]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	683a      	ldr	r2, [r7, #0]
 800177a:	430a      	orrs	r2, r1
 800177c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800177e:	2300      	movs	r3, #0
 8001780:	e006      	b.n	8001790 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001786:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
  }
}
 8001790:	4618      	mov	r0, r3
 8001792:	3714      	adds	r7, #20
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b08a      	sub	sp, #40	; 0x28
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80017a4:	2300      	movs	r3, #0
 80017a6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	695b      	ldr	r3, [r3, #20]
 80017ae:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	68db      	ldr	r3, [r3, #12]
 80017c6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	691b      	ldr	r3, [r3, #16]
 80017ce:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	699b      	ldr	r3, [r3, #24]
 80017d6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80017d8:	6a3b      	ldr	r3, [r7, #32]
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d07c      	beq.n	80018dc <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80017e2:	69bb      	ldr	r3, [r7, #24]
 80017e4:	f003 0301 	and.w	r3, r3, #1
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d023      	beq.n	8001834 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2201      	movs	r2, #1
 80017f2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80017f4:	69bb      	ldr	r3, [r7, #24]
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d003      	beq.n	8001806 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f000 f97d 	bl	8001afe <HAL_CAN_TxMailbox0CompleteCallback>
 8001804:	e016      	b.n	8001834 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	f003 0304 	and.w	r3, r3, #4
 800180c:	2b00      	cmp	r3, #0
 800180e:	d004      	beq.n	800181a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001812:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001816:	627b      	str	r3, [r7, #36]	; 0x24
 8001818:	e00c      	b.n	8001834 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800181a:	69bb      	ldr	r3, [r7, #24]
 800181c:	f003 0308 	and.w	r3, r3, #8
 8001820:	2b00      	cmp	r3, #0
 8001822:	d004      	beq.n	800182e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001826:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800182a:	627b      	str	r3, [r7, #36]	; 0x24
 800182c:	e002      	b.n	8001834 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f000 f983 	bl	8001b3a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800183a:	2b00      	cmp	r3, #0
 800183c:	d024      	beq.n	8001888 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001846:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001848:	69bb      	ldr	r3, [r7, #24]
 800184a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800184e:	2b00      	cmp	r3, #0
 8001850:	d003      	beq.n	800185a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f000 f95d 	bl	8001b12 <HAL_CAN_TxMailbox1CompleteCallback>
 8001858:	e016      	b.n	8001888 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001860:	2b00      	cmp	r3, #0
 8001862:	d004      	beq.n	800186e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001866:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800186a:	627b      	str	r3, [r7, #36]	; 0x24
 800186c:	e00c      	b.n	8001888 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001874:	2b00      	cmp	r3, #0
 8001876:	d004      	beq.n	8001882 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800187e:	627b      	str	r3, [r7, #36]	; 0x24
 8001880:	e002      	b.n	8001888 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f000 f963 	bl	8001b4e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001888:	69bb      	ldr	r3, [r7, #24]
 800188a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d024      	beq.n	80018dc <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800189a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d003      	beq.n	80018ae <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f000 f93d 	bl	8001b26 <HAL_CAN_TxMailbox2CompleteCallback>
 80018ac:	e016      	b.n	80018dc <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80018ae:	69bb      	ldr	r3, [r7, #24]
 80018b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d004      	beq.n	80018c2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80018b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018be:	627b      	str	r3, [r7, #36]	; 0x24
 80018c0:	e00c      	b.n	80018dc <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d004      	beq.n	80018d6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80018cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018d2:	627b      	str	r3, [r7, #36]	; 0x24
 80018d4:	e002      	b.n	80018dc <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f000 f943 	bl	8001b62 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80018dc:	6a3b      	ldr	r3, [r7, #32]
 80018de:	f003 0308 	and.w	r3, r3, #8
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d00c      	beq.n	8001900 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	f003 0310 	and.w	r3, r3, #16
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d007      	beq.n	8001900 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80018f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018f6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2210      	movs	r2, #16
 80018fe:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001900:	6a3b      	ldr	r3, [r7, #32]
 8001902:	f003 0304 	and.w	r3, r3, #4
 8001906:	2b00      	cmp	r3, #0
 8001908:	d00b      	beq.n	8001922 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	f003 0308 	and.w	r3, r3, #8
 8001910:	2b00      	cmp	r3, #0
 8001912:	d006      	beq.n	8001922 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2208      	movs	r2, #8
 800191a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f000 f92a 	bl	8001b76 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001922:	6a3b      	ldr	r3, [r7, #32]
 8001924:	f003 0302 	and.w	r3, r3, #2
 8001928:	2b00      	cmp	r3, #0
 800192a:	d009      	beq.n	8001940 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	68db      	ldr	r3, [r3, #12]
 8001932:	f003 0303 	and.w	r3, r3, #3
 8001936:	2b00      	cmp	r3, #0
 8001938:	d002      	beq.n	8001940 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f7ff f944 	bl	8000bc8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001940:	6a3b      	ldr	r3, [r7, #32]
 8001942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001946:	2b00      	cmp	r3, #0
 8001948:	d00c      	beq.n	8001964 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	f003 0310 	and.w	r3, r3, #16
 8001950:	2b00      	cmp	r3, #0
 8001952:	d007      	beq.n	8001964 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001956:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800195a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2210      	movs	r2, #16
 8001962:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001964:	6a3b      	ldr	r3, [r7, #32]
 8001966:	f003 0320 	and.w	r3, r3, #32
 800196a:	2b00      	cmp	r3, #0
 800196c:	d00b      	beq.n	8001986 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	f003 0308 	and.w	r3, r3, #8
 8001974:	2b00      	cmp	r3, #0
 8001976:	d006      	beq.n	8001986 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2208      	movs	r2, #8
 800197e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f000 f90c 	bl	8001b9e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001986:	6a3b      	ldr	r3, [r7, #32]
 8001988:	f003 0310 	and.w	r3, r3, #16
 800198c:	2b00      	cmp	r3, #0
 800198e:	d009      	beq.n	80019a4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	691b      	ldr	r3, [r3, #16]
 8001996:	f003 0303 	and.w	r3, r3, #3
 800199a:	2b00      	cmp	r3, #0
 800199c:	d002      	beq.n	80019a4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f000 f8f3 	bl	8001b8a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80019a4:	6a3b      	ldr	r3, [r7, #32]
 80019a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d00b      	beq.n	80019c6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	f003 0310 	and.w	r3, r3, #16
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d006      	beq.n	80019c6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2210      	movs	r2, #16
 80019be:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f000 f8f6 	bl	8001bb2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80019c6:	6a3b      	ldr	r3, [r7, #32]
 80019c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d00b      	beq.n	80019e8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	f003 0308 	and.w	r3, r3, #8
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d006      	beq.n	80019e8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2208      	movs	r2, #8
 80019e0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f000 f8ef 	bl	8001bc6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80019e8:	6a3b      	ldr	r3, [r7, #32]
 80019ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d075      	beq.n	8001ade <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	f003 0304 	and.w	r3, r3, #4
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d06c      	beq.n	8001ad6 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80019fc:	6a3b      	ldr	r3, [r7, #32]
 80019fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d008      	beq.n	8001a18 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d003      	beq.n	8001a18 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a12:	f043 0301 	orr.w	r3, r3, #1
 8001a16:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001a18:	6a3b      	ldr	r3, [r7, #32]
 8001a1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d008      	beq.n	8001a34 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d003      	beq.n	8001a34 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2e:	f043 0302 	orr.w	r3, r3, #2
 8001a32:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001a34:	6a3b      	ldr	r3, [r7, #32]
 8001a36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d008      	beq.n	8001a50 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d003      	beq.n	8001a50 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4a:	f043 0304 	orr.w	r3, r3, #4
 8001a4e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001a50:	6a3b      	ldr	r3, [r7, #32]
 8001a52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d03d      	beq.n	8001ad6 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d038      	beq.n	8001ad6 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a6a:	2b30      	cmp	r3, #48	; 0x30
 8001a6c:	d017      	beq.n	8001a9e <HAL_CAN_IRQHandler+0x302>
 8001a6e:	2b30      	cmp	r3, #48	; 0x30
 8001a70:	d804      	bhi.n	8001a7c <HAL_CAN_IRQHandler+0x2e0>
 8001a72:	2b10      	cmp	r3, #16
 8001a74:	d009      	beq.n	8001a8a <HAL_CAN_IRQHandler+0x2ee>
 8001a76:	2b20      	cmp	r3, #32
 8001a78:	d00c      	beq.n	8001a94 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001a7a:	e024      	b.n	8001ac6 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8001a7c:	2b50      	cmp	r3, #80	; 0x50
 8001a7e:	d018      	beq.n	8001ab2 <HAL_CAN_IRQHandler+0x316>
 8001a80:	2b60      	cmp	r3, #96	; 0x60
 8001a82:	d01b      	beq.n	8001abc <HAL_CAN_IRQHandler+0x320>
 8001a84:	2b40      	cmp	r3, #64	; 0x40
 8001a86:	d00f      	beq.n	8001aa8 <HAL_CAN_IRQHandler+0x30c>
            break;
 8001a88:	e01d      	b.n	8001ac6 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8001a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8c:	f043 0308 	orr.w	r3, r3, #8
 8001a90:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a92:	e018      	b.n	8001ac6 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a96:	f043 0310 	orr.w	r3, r3, #16
 8001a9a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a9c:	e013      	b.n	8001ac6 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa0:	f043 0320 	orr.w	r3, r3, #32
 8001aa4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001aa6:	e00e      	b.n	8001ac6 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8001aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001aae:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ab0:	e009      	b.n	8001ac6 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8001ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ab8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001aba:	e004      	b.n	8001ac6 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ac2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ac4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	699a      	ldr	r2, [r3, #24]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001ad4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	2204      	movs	r2, #4
 8001adc:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d008      	beq.n	8001af6 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aea:	431a      	orrs	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f000 f872 	bl	8001bda <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001af6:	bf00      	nop
 8001af8:	3728      	adds	r7, #40	; 0x28
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001afe:	b480      	push	{r7}
 8001b00:	b083      	sub	sp, #12
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001b06:	bf00      	nop
 8001b08:	370c      	adds	r7, #12
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr

08001b12 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001b12:	b480      	push	{r7}
 8001b14:	b083      	sub	sp, #12
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001b1a:	bf00      	nop
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr

08001b26 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001b26:	b480      	push	{r7}
 8001b28:	b083      	sub	sp, #12
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001b2e:	bf00      	nop
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr

08001b3a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	b083      	sub	sp, #12
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001b42:	bf00      	nop
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr

08001b4e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	b083      	sub	sp, #12
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001b56:	bf00      	nop
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr

08001b62 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001b62:	b480      	push	{r7}
 8001b64:	b083      	sub	sp, #12
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001b6a:	bf00      	nop
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr

08001b76 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001b76:	b480      	push	{r7}
 8001b78:	b083      	sub	sp, #12
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001b7e:	bf00      	nop
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr

08001b8a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	b083      	sub	sp, #12
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001b92:	bf00      	nop
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr

08001b9e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	b083      	sub	sp, #12
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001ba6:	bf00      	nop
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr

08001bb2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	b083      	sub	sp, #12
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001bba:	bf00      	nop
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr

08001bc6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	b083      	sub	sp, #12
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001bce:	bf00      	nop
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr

08001bda <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	b083      	sub	sp, #12
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001be2:	bf00      	nop
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
	...

08001bf0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f003 0307 	and.w	r3, r3, #7
 8001bfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c00:	4b0c      	ldr	r3, [pc, #48]	; (8001c34 <__NVIC_SetPriorityGrouping+0x44>)
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c06:	68ba      	ldr	r2, [r7, #8]
 8001c08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c22:	4a04      	ldr	r2, [pc, #16]	; (8001c34 <__NVIC_SetPriorityGrouping+0x44>)
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	60d3      	str	r3, [r2, #12]
}
 8001c28:	bf00      	nop
 8001c2a:	3714      	adds	r7, #20
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr
 8001c34:	e000ed00 	.word	0xe000ed00

08001c38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c3c:	4b04      	ldr	r3, [pc, #16]	; (8001c50 <__NVIC_GetPriorityGrouping+0x18>)
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	0a1b      	lsrs	r3, r3, #8
 8001c42:	f003 0307 	and.w	r3, r3, #7
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr
 8001c50:	e000ed00 	.word	0xe000ed00

08001c54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	db0b      	blt.n	8001c7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c66:	79fb      	ldrb	r3, [r7, #7]
 8001c68:	f003 021f 	and.w	r2, r3, #31
 8001c6c:	4907      	ldr	r1, [pc, #28]	; (8001c8c <__NVIC_EnableIRQ+0x38>)
 8001c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c72:	095b      	lsrs	r3, r3, #5
 8001c74:	2001      	movs	r0, #1
 8001c76:	fa00 f202 	lsl.w	r2, r0, r2
 8001c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c7e:	bf00      	nop
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	e000e100 	.word	0xe000e100

08001c90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	4603      	mov	r3, r0
 8001c98:	6039      	str	r1, [r7, #0]
 8001c9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	db0a      	blt.n	8001cba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	b2da      	uxtb	r2, r3
 8001ca8:	490c      	ldr	r1, [pc, #48]	; (8001cdc <__NVIC_SetPriority+0x4c>)
 8001caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cae:	0112      	lsls	r2, r2, #4
 8001cb0:	b2d2      	uxtb	r2, r2
 8001cb2:	440b      	add	r3, r1
 8001cb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cb8:	e00a      	b.n	8001cd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	b2da      	uxtb	r2, r3
 8001cbe:	4908      	ldr	r1, [pc, #32]	; (8001ce0 <__NVIC_SetPriority+0x50>)
 8001cc0:	79fb      	ldrb	r3, [r7, #7]
 8001cc2:	f003 030f 	and.w	r3, r3, #15
 8001cc6:	3b04      	subs	r3, #4
 8001cc8:	0112      	lsls	r2, r2, #4
 8001cca:	b2d2      	uxtb	r2, r2
 8001ccc:	440b      	add	r3, r1
 8001cce:	761a      	strb	r2, [r3, #24]
}
 8001cd0:	bf00      	nop
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr
 8001cdc:	e000e100 	.word	0xe000e100
 8001ce0:	e000ed00 	.word	0xe000ed00

08001ce4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b089      	sub	sp, #36	; 0x24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f003 0307 	and.w	r3, r3, #7
 8001cf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	f1c3 0307 	rsb	r3, r3, #7
 8001cfe:	2b04      	cmp	r3, #4
 8001d00:	bf28      	it	cs
 8001d02:	2304      	movcs	r3, #4
 8001d04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	3304      	adds	r3, #4
 8001d0a:	2b06      	cmp	r3, #6
 8001d0c:	d902      	bls.n	8001d14 <NVIC_EncodePriority+0x30>
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	3b03      	subs	r3, #3
 8001d12:	e000      	b.n	8001d16 <NVIC_EncodePriority+0x32>
 8001d14:	2300      	movs	r3, #0
 8001d16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d18:	f04f 32ff 	mov.w	r2, #4294967295
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d22:	43da      	mvns	r2, r3
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	401a      	ands	r2, r3
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	fa01 f303 	lsl.w	r3, r1, r3
 8001d36:	43d9      	mvns	r1, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d3c:	4313      	orrs	r3, r2
         );
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3724      	adds	r7, #36	; 0x24
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
	...

08001d4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	3b01      	subs	r3, #1
 8001d58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d5c:	d301      	bcc.n	8001d62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e00f      	b.n	8001d82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d62:	4a0a      	ldr	r2, [pc, #40]	; (8001d8c <SysTick_Config+0x40>)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	3b01      	subs	r3, #1
 8001d68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d6a:	210f      	movs	r1, #15
 8001d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d70:	f7ff ff8e 	bl	8001c90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d74:	4b05      	ldr	r3, [pc, #20]	; (8001d8c <SysTick_Config+0x40>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d7a:	4b04      	ldr	r3, [pc, #16]	; (8001d8c <SysTick_Config+0x40>)
 8001d7c:	2207      	movs	r2, #7
 8001d7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	e000e010 	.word	0xe000e010

08001d90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f7ff ff29 	bl	8001bf0 <__NVIC_SetPriorityGrouping>
}
 8001d9e:	bf00      	nop
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001da6:	b580      	push	{r7, lr}
 8001da8:	b086      	sub	sp, #24
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	4603      	mov	r3, r0
 8001dae:	60b9      	str	r1, [r7, #8]
 8001db0:	607a      	str	r2, [r7, #4]
 8001db2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001db4:	2300      	movs	r3, #0
 8001db6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001db8:	f7ff ff3e 	bl	8001c38 <__NVIC_GetPriorityGrouping>
 8001dbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	68b9      	ldr	r1, [r7, #8]
 8001dc2:	6978      	ldr	r0, [r7, #20]
 8001dc4:	f7ff ff8e 	bl	8001ce4 <NVIC_EncodePriority>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dce:	4611      	mov	r1, r2
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7ff ff5d 	bl	8001c90 <__NVIC_SetPriority>
}
 8001dd6:	bf00      	nop
 8001dd8:	3718      	adds	r7, #24
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b082      	sub	sp, #8
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	4603      	mov	r3, r0
 8001de6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7ff ff31 	bl	8001c54 <__NVIC_EnableIRQ>
}
 8001df2:	bf00      	nop
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	b082      	sub	sp, #8
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f7ff ffa2 	bl	8001d4c <SysTick_Config>
 8001e08:	4603      	mov	r3, r0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
	...

08001e14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b089      	sub	sp, #36	; 0x24
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e22:	2300      	movs	r3, #0
 8001e24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e26:	2300      	movs	r3, #0
 8001e28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	61fb      	str	r3, [r7, #28]
 8001e2e:	e165      	b.n	80020fc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e30:	2201      	movs	r2, #1
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	697a      	ldr	r2, [r7, #20]
 8001e40:	4013      	ands	r3, r2
 8001e42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e44:	693a      	ldr	r2, [r7, #16]
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	f040 8154 	bne.w	80020f6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d00b      	beq.n	8001e6e <HAL_GPIO_Init+0x5a>
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d007      	beq.n	8001e6e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e62:	2b11      	cmp	r3, #17
 8001e64:	d003      	beq.n	8001e6e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	2b12      	cmp	r3, #18
 8001e6c:	d130      	bne.n	8001ed0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	2203      	movs	r2, #3
 8001e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7e:	43db      	mvns	r3, r3
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	4013      	ands	r3, r2
 8001e84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	68da      	ldr	r2, [r3, #12]
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e92:	69ba      	ldr	r2, [r7, #24]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	43db      	mvns	r3, r3
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	091b      	lsrs	r3, r3, #4
 8001eba:	f003 0201 	and.w	r2, r3, #1
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	2203      	movs	r2, #3
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	689a      	ldr	r2, [r3, #8]
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	d003      	beq.n	8001f10 <HAL_GPIO_Init+0xfc>
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	2b12      	cmp	r3, #18
 8001f0e:	d123      	bne.n	8001f58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	08da      	lsrs	r2, r3, #3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	3208      	adds	r2, #8
 8001f18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	f003 0307 	and.w	r3, r3, #7
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	220f      	movs	r2, #15
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	43db      	mvns	r3, r3
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	4013      	ands	r3, r2
 8001f32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	691a      	ldr	r2, [r3, #16]
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	f003 0307 	and.w	r3, r3, #7
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	08da      	lsrs	r2, r3, #3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	3208      	adds	r2, #8
 8001f52:	69b9      	ldr	r1, [r7, #24]
 8001f54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	005b      	lsls	r3, r3, #1
 8001f62:	2203      	movs	r2, #3
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	43db      	mvns	r3, r3
 8001f6a:	69ba      	ldr	r2, [r7, #24]
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f003 0203 	and.w	r2, r3, #3
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	005b      	lsls	r3, r3, #1
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	f000 80ae 	beq.w	80020f6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	60fb      	str	r3, [r7, #12]
 8001f9e:	4b5c      	ldr	r3, [pc, #368]	; (8002110 <HAL_GPIO_Init+0x2fc>)
 8001fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa2:	4a5b      	ldr	r2, [pc, #364]	; (8002110 <HAL_GPIO_Init+0x2fc>)
 8001fa4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fa8:	6453      	str	r3, [r2, #68]	; 0x44
 8001faa:	4b59      	ldr	r3, [pc, #356]	; (8002110 <HAL_GPIO_Init+0x2fc>)
 8001fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fb2:	60fb      	str	r3, [r7, #12]
 8001fb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fb6:	4a57      	ldr	r2, [pc, #348]	; (8002114 <HAL_GPIO_Init+0x300>)
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	089b      	lsrs	r3, r3, #2
 8001fbc:	3302      	adds	r3, #2
 8001fbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	f003 0303 	and.w	r3, r3, #3
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	220f      	movs	r2, #15
 8001fce:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd2:	43db      	mvns	r3, r3
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a4e      	ldr	r2, [pc, #312]	; (8002118 <HAL_GPIO_Init+0x304>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d025      	beq.n	800202e <HAL_GPIO_Init+0x21a>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a4d      	ldr	r2, [pc, #308]	; (800211c <HAL_GPIO_Init+0x308>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d01f      	beq.n	800202a <HAL_GPIO_Init+0x216>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a4c      	ldr	r2, [pc, #304]	; (8002120 <HAL_GPIO_Init+0x30c>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d019      	beq.n	8002026 <HAL_GPIO_Init+0x212>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a4b      	ldr	r2, [pc, #300]	; (8002124 <HAL_GPIO_Init+0x310>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d013      	beq.n	8002022 <HAL_GPIO_Init+0x20e>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a4a      	ldr	r2, [pc, #296]	; (8002128 <HAL_GPIO_Init+0x314>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d00d      	beq.n	800201e <HAL_GPIO_Init+0x20a>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a49      	ldr	r2, [pc, #292]	; (800212c <HAL_GPIO_Init+0x318>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d007      	beq.n	800201a <HAL_GPIO_Init+0x206>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a48      	ldr	r2, [pc, #288]	; (8002130 <HAL_GPIO_Init+0x31c>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d101      	bne.n	8002016 <HAL_GPIO_Init+0x202>
 8002012:	2306      	movs	r3, #6
 8002014:	e00c      	b.n	8002030 <HAL_GPIO_Init+0x21c>
 8002016:	2307      	movs	r3, #7
 8002018:	e00a      	b.n	8002030 <HAL_GPIO_Init+0x21c>
 800201a:	2305      	movs	r3, #5
 800201c:	e008      	b.n	8002030 <HAL_GPIO_Init+0x21c>
 800201e:	2304      	movs	r3, #4
 8002020:	e006      	b.n	8002030 <HAL_GPIO_Init+0x21c>
 8002022:	2303      	movs	r3, #3
 8002024:	e004      	b.n	8002030 <HAL_GPIO_Init+0x21c>
 8002026:	2302      	movs	r3, #2
 8002028:	e002      	b.n	8002030 <HAL_GPIO_Init+0x21c>
 800202a:	2301      	movs	r3, #1
 800202c:	e000      	b.n	8002030 <HAL_GPIO_Init+0x21c>
 800202e:	2300      	movs	r3, #0
 8002030:	69fa      	ldr	r2, [r7, #28]
 8002032:	f002 0203 	and.w	r2, r2, #3
 8002036:	0092      	lsls	r2, r2, #2
 8002038:	4093      	lsls	r3, r2
 800203a:	69ba      	ldr	r2, [r7, #24]
 800203c:	4313      	orrs	r3, r2
 800203e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002040:	4934      	ldr	r1, [pc, #208]	; (8002114 <HAL_GPIO_Init+0x300>)
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	089b      	lsrs	r3, r3, #2
 8002046:	3302      	adds	r3, #2
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800204e:	4b39      	ldr	r3, [pc, #228]	; (8002134 <HAL_GPIO_Init+0x320>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	43db      	mvns	r3, r3
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	4013      	ands	r3, r2
 800205c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d003      	beq.n	8002072 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	4313      	orrs	r3, r2
 8002070:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002072:	4a30      	ldr	r2, [pc, #192]	; (8002134 <HAL_GPIO_Init+0x320>)
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002078:	4b2e      	ldr	r3, [pc, #184]	; (8002134 <HAL_GPIO_Init+0x320>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	43db      	mvns	r3, r3
 8002082:	69ba      	ldr	r2, [r7, #24]
 8002084:	4013      	ands	r3, r2
 8002086:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d003      	beq.n	800209c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	4313      	orrs	r3, r2
 800209a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800209c:	4a25      	ldr	r2, [pc, #148]	; (8002134 <HAL_GPIO_Init+0x320>)
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020a2:	4b24      	ldr	r3, [pc, #144]	; (8002134 <HAL_GPIO_Init+0x320>)
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	43db      	mvns	r3, r3
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	4013      	ands	r3, r2
 80020b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d003      	beq.n	80020c6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020c6:	4a1b      	ldr	r2, [pc, #108]	; (8002134 <HAL_GPIO_Init+0x320>)
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020cc:	4b19      	ldr	r3, [pc, #100]	; (8002134 <HAL_GPIO_Init+0x320>)
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	43db      	mvns	r3, r3
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	4013      	ands	r3, r2
 80020da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d003      	beq.n	80020f0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020f0:	4a10      	ldr	r2, [pc, #64]	; (8002134 <HAL_GPIO_Init+0x320>)
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	3301      	adds	r3, #1
 80020fa:	61fb      	str	r3, [r7, #28]
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	2b0f      	cmp	r3, #15
 8002100:	f67f ae96 	bls.w	8001e30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002104:	bf00      	nop
 8002106:	3724      	adds	r7, #36	; 0x24
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr
 8002110:	40023800 	.word	0x40023800
 8002114:	40013800 	.word	0x40013800
 8002118:	40020000 	.word	0x40020000
 800211c:	40020400 	.word	0x40020400
 8002120:	40020800 	.word	0x40020800
 8002124:	40020c00 	.word	0x40020c00
 8002128:	40021000 	.word	0x40021000
 800212c:	40021400 	.word	0x40021400
 8002130:	40021800 	.word	0x40021800
 8002134:	40013c00 	.word	0x40013c00

08002138 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800213e:	2300      	movs	r3, #0
 8002140:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002142:	2300      	movs	r3, #0
 8002144:	603b      	str	r3, [r7, #0]
 8002146:	4b20      	ldr	r3, [pc, #128]	; (80021c8 <HAL_PWREx_EnableOverDrive+0x90>)
 8002148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214a:	4a1f      	ldr	r2, [pc, #124]	; (80021c8 <HAL_PWREx_EnableOverDrive+0x90>)
 800214c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002150:	6413      	str	r3, [r2, #64]	; 0x40
 8002152:	4b1d      	ldr	r3, [pc, #116]	; (80021c8 <HAL_PWREx_EnableOverDrive+0x90>)
 8002154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002156:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800215a:	603b      	str	r3, [r7, #0]
 800215c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800215e:	4b1b      	ldr	r3, [pc, #108]	; (80021cc <HAL_PWREx_EnableOverDrive+0x94>)
 8002160:	2201      	movs	r2, #1
 8002162:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002164:	f7fe fea6 	bl	8000eb4 <HAL_GetTick>
 8002168:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800216a:	e009      	b.n	8002180 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800216c:	f7fe fea2 	bl	8000eb4 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800217a:	d901      	bls.n	8002180 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e01f      	b.n	80021c0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002180:	4b13      	ldr	r3, [pc, #76]	; (80021d0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002188:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800218c:	d1ee      	bne.n	800216c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800218e:	4b11      	ldr	r3, [pc, #68]	; (80021d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002190:	2201      	movs	r2, #1
 8002192:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002194:	f7fe fe8e 	bl	8000eb4 <HAL_GetTick>
 8002198:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800219a:	e009      	b.n	80021b0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800219c:	f7fe fe8a 	bl	8000eb4 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021aa:	d901      	bls.n	80021b0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	e007      	b.n	80021c0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80021b0:	4b07      	ldr	r3, [pc, #28]	; (80021d0 <HAL_PWREx_EnableOverDrive+0x98>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80021bc:	d1ee      	bne.n	800219c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80021be:	2300      	movs	r3, #0
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3708      	adds	r7, #8
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	40023800 	.word	0x40023800
 80021cc:	420e0040 	.word	0x420e0040
 80021d0:	40007000 	.word	0x40007000
 80021d4:	420e0044 	.word	0x420e0044

080021d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d101      	bne.n	80021ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e0cc      	b.n	8002386 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021ec:	4b68      	ldr	r3, [pc, #416]	; (8002390 <HAL_RCC_ClockConfig+0x1b8>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 030f 	and.w	r3, r3, #15
 80021f4:	683a      	ldr	r2, [r7, #0]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d90c      	bls.n	8002214 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021fa:	4b65      	ldr	r3, [pc, #404]	; (8002390 <HAL_RCC_ClockConfig+0x1b8>)
 80021fc:	683a      	ldr	r2, [r7, #0]
 80021fe:	b2d2      	uxtb	r2, r2
 8002200:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002202:	4b63      	ldr	r3, [pc, #396]	; (8002390 <HAL_RCC_ClockConfig+0x1b8>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 030f 	and.w	r3, r3, #15
 800220a:	683a      	ldr	r2, [r7, #0]
 800220c:	429a      	cmp	r2, r3
 800220e:	d001      	beq.n	8002214 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e0b8      	b.n	8002386 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0302 	and.w	r3, r3, #2
 800221c:	2b00      	cmp	r3, #0
 800221e:	d020      	beq.n	8002262 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0304 	and.w	r3, r3, #4
 8002228:	2b00      	cmp	r3, #0
 800222a:	d005      	beq.n	8002238 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800222c:	4b59      	ldr	r3, [pc, #356]	; (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	4a58      	ldr	r2, [pc, #352]	; (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 8002232:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002236:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0308 	and.w	r3, r3, #8
 8002240:	2b00      	cmp	r3, #0
 8002242:	d005      	beq.n	8002250 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002244:	4b53      	ldr	r3, [pc, #332]	; (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	4a52      	ldr	r2, [pc, #328]	; (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 800224a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800224e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002250:	4b50      	ldr	r3, [pc, #320]	; (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	494d      	ldr	r1, [pc, #308]	; (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 800225e:	4313      	orrs	r3, r2
 8002260:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0301 	and.w	r3, r3, #1
 800226a:	2b00      	cmp	r3, #0
 800226c:	d044      	beq.n	80022f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	2b01      	cmp	r3, #1
 8002274:	d107      	bne.n	8002286 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002276:	4b47      	ldr	r3, [pc, #284]	; (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d119      	bne.n	80022b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e07f      	b.n	8002386 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	2b02      	cmp	r3, #2
 800228c:	d003      	beq.n	8002296 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002292:	2b03      	cmp	r3, #3
 8002294:	d107      	bne.n	80022a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002296:	4b3f      	ldr	r3, [pc, #252]	; (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d109      	bne.n	80022b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e06f      	b.n	8002386 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022a6:	4b3b      	ldr	r3, [pc, #236]	; (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d101      	bne.n	80022b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e067      	b.n	8002386 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022b6:	4b37      	ldr	r3, [pc, #220]	; (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f023 0203 	bic.w	r2, r3, #3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	4934      	ldr	r1, [pc, #208]	; (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 80022c4:	4313      	orrs	r3, r2
 80022c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022c8:	f7fe fdf4 	bl	8000eb4 <HAL_GetTick>
 80022cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ce:	e00a      	b.n	80022e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022d0:	f7fe fdf0 	bl	8000eb4 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	f241 3288 	movw	r2, #5000	; 0x1388
 80022de:	4293      	cmp	r3, r2
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e04f      	b.n	8002386 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022e6:	4b2b      	ldr	r3, [pc, #172]	; (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f003 020c 	and.w	r2, r3, #12
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d1eb      	bne.n	80022d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022f8:	4b25      	ldr	r3, [pc, #148]	; (8002390 <HAL_RCC_ClockConfig+0x1b8>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 030f 	and.w	r3, r3, #15
 8002300:	683a      	ldr	r2, [r7, #0]
 8002302:	429a      	cmp	r2, r3
 8002304:	d20c      	bcs.n	8002320 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002306:	4b22      	ldr	r3, [pc, #136]	; (8002390 <HAL_RCC_ClockConfig+0x1b8>)
 8002308:	683a      	ldr	r2, [r7, #0]
 800230a:	b2d2      	uxtb	r2, r2
 800230c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800230e:	4b20      	ldr	r3, [pc, #128]	; (8002390 <HAL_RCC_ClockConfig+0x1b8>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 030f 	and.w	r3, r3, #15
 8002316:	683a      	ldr	r2, [r7, #0]
 8002318:	429a      	cmp	r2, r3
 800231a:	d001      	beq.n	8002320 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e032      	b.n	8002386 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0304 	and.w	r3, r3, #4
 8002328:	2b00      	cmp	r3, #0
 800232a:	d008      	beq.n	800233e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800232c:	4b19      	ldr	r3, [pc, #100]	; (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	4916      	ldr	r1, [pc, #88]	; (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 800233a:	4313      	orrs	r3, r2
 800233c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0308 	and.w	r3, r3, #8
 8002346:	2b00      	cmp	r3, #0
 8002348:	d009      	beq.n	800235e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800234a:	4b12      	ldr	r3, [pc, #72]	; (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	00db      	lsls	r3, r3, #3
 8002358:	490e      	ldr	r1, [pc, #56]	; (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 800235a:	4313      	orrs	r3, r2
 800235c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800235e:	f000 f821 	bl	80023a4 <HAL_RCC_GetSysClockFreq>
 8002362:	4601      	mov	r1, r0
 8002364:	4b0b      	ldr	r3, [pc, #44]	; (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	091b      	lsrs	r3, r3, #4
 800236a:	f003 030f 	and.w	r3, r3, #15
 800236e:	4a0a      	ldr	r2, [pc, #40]	; (8002398 <HAL_RCC_ClockConfig+0x1c0>)
 8002370:	5cd3      	ldrb	r3, [r2, r3]
 8002372:	fa21 f303 	lsr.w	r3, r1, r3
 8002376:	4a09      	ldr	r2, [pc, #36]	; (800239c <HAL_RCC_ClockConfig+0x1c4>)
 8002378:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800237a:	4b09      	ldr	r3, [pc, #36]	; (80023a0 <HAL_RCC_ClockConfig+0x1c8>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4618      	mov	r0, r3
 8002380:	f7fe fd54 	bl	8000e2c <HAL_InitTick>

  return HAL_OK;
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	3710      	adds	r7, #16
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	40023c00 	.word	0x40023c00
 8002394:	40023800 	.word	0x40023800
 8002398:	08002dd4 	.word	0x08002dd4
 800239c:	20000000 	.word	0x20000000
 80023a0:	20000004 	.word	0x20000004

080023a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023a6:	b087      	sub	sp, #28
 80023a8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80023aa:	2300      	movs	r3, #0
 80023ac:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 80023ae:	2300      	movs	r3, #0
 80023b0:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 80023b2:	2300      	movs	r3, #0
 80023b4:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 80023b6:	2300      	movs	r3, #0
 80023b8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80023ba:	2300      	movs	r3, #0
 80023bc:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023be:	4bc6      	ldr	r3, [pc, #792]	; (80026d8 <HAL_RCC_GetSysClockFreq+0x334>)
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	f003 030c 	and.w	r3, r3, #12
 80023c6:	2b0c      	cmp	r3, #12
 80023c8:	f200 817e 	bhi.w	80026c8 <HAL_RCC_GetSysClockFreq+0x324>
 80023cc:	a201      	add	r2, pc, #4	; (adr r2, 80023d4 <HAL_RCC_GetSysClockFreq+0x30>)
 80023ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023d2:	bf00      	nop
 80023d4:	08002409 	.word	0x08002409
 80023d8:	080026c9 	.word	0x080026c9
 80023dc:	080026c9 	.word	0x080026c9
 80023e0:	080026c9 	.word	0x080026c9
 80023e4:	0800240f 	.word	0x0800240f
 80023e8:	080026c9 	.word	0x080026c9
 80023ec:	080026c9 	.word	0x080026c9
 80023f0:	080026c9 	.word	0x080026c9
 80023f4:	08002415 	.word	0x08002415
 80023f8:	080026c9 	.word	0x080026c9
 80023fc:	080026c9 	.word	0x080026c9
 8002400:	080026c9 	.word	0x080026c9
 8002404:	08002571 	.word	0x08002571
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002408:	4bb4      	ldr	r3, [pc, #720]	; (80026dc <HAL_RCC_GetSysClockFreq+0x338>)
 800240a:	613b      	str	r3, [r7, #16]
       break;
 800240c:	e15f      	b.n	80026ce <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800240e:	4bb3      	ldr	r3, [pc, #716]	; (80026dc <HAL_RCC_GetSysClockFreq+0x338>)
 8002410:	613b      	str	r3, [r7, #16]
      break;
 8002412:	e15c      	b.n	80026ce <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002414:	4bb0      	ldr	r3, [pc, #704]	; (80026d8 <HAL_RCC_GetSysClockFreq+0x334>)
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800241c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800241e:	4bae      	ldr	r3, [pc, #696]	; (80026d8 <HAL_RCC_GetSysClockFreq+0x334>)
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d04a      	beq.n	80024c0 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800242a:	4bab      	ldr	r3, [pc, #684]	; (80026d8 <HAL_RCC_GetSysClockFreq+0x334>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	099b      	lsrs	r3, r3, #6
 8002430:	f04f 0400 	mov.w	r4, #0
 8002434:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002438:	f04f 0200 	mov.w	r2, #0
 800243c:	ea03 0501 	and.w	r5, r3, r1
 8002440:	ea04 0602 	and.w	r6, r4, r2
 8002444:	4629      	mov	r1, r5
 8002446:	4632      	mov	r2, r6
 8002448:	f04f 0300 	mov.w	r3, #0
 800244c:	f04f 0400 	mov.w	r4, #0
 8002450:	0154      	lsls	r4, r2, #5
 8002452:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002456:	014b      	lsls	r3, r1, #5
 8002458:	4619      	mov	r1, r3
 800245a:	4622      	mov	r2, r4
 800245c:	1b49      	subs	r1, r1, r5
 800245e:	eb62 0206 	sbc.w	r2, r2, r6
 8002462:	f04f 0300 	mov.w	r3, #0
 8002466:	f04f 0400 	mov.w	r4, #0
 800246a:	0194      	lsls	r4, r2, #6
 800246c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002470:	018b      	lsls	r3, r1, #6
 8002472:	1a5b      	subs	r3, r3, r1
 8002474:	eb64 0402 	sbc.w	r4, r4, r2
 8002478:	f04f 0100 	mov.w	r1, #0
 800247c:	f04f 0200 	mov.w	r2, #0
 8002480:	00e2      	lsls	r2, r4, #3
 8002482:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002486:	00d9      	lsls	r1, r3, #3
 8002488:	460b      	mov	r3, r1
 800248a:	4614      	mov	r4, r2
 800248c:	195b      	adds	r3, r3, r5
 800248e:	eb44 0406 	adc.w	r4, r4, r6
 8002492:	f04f 0100 	mov.w	r1, #0
 8002496:	f04f 0200 	mov.w	r2, #0
 800249a:	02a2      	lsls	r2, r4, #10
 800249c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80024a0:	0299      	lsls	r1, r3, #10
 80024a2:	460b      	mov	r3, r1
 80024a4:	4614      	mov	r4, r2
 80024a6:	4618      	mov	r0, r3
 80024a8:	4621      	mov	r1, r4
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	f04f 0400 	mov.w	r4, #0
 80024b0:	461a      	mov	r2, r3
 80024b2:	4623      	mov	r3, r4
 80024b4:	f7fd fea6 	bl	8000204 <__aeabi_uldivmod>
 80024b8:	4603      	mov	r3, r0
 80024ba:	460c      	mov	r4, r1
 80024bc:	617b      	str	r3, [r7, #20]
 80024be:	e049      	b.n	8002554 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024c0:	4b85      	ldr	r3, [pc, #532]	; (80026d8 <HAL_RCC_GetSysClockFreq+0x334>)
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	099b      	lsrs	r3, r3, #6
 80024c6:	f04f 0400 	mov.w	r4, #0
 80024ca:	f240 11ff 	movw	r1, #511	; 0x1ff
 80024ce:	f04f 0200 	mov.w	r2, #0
 80024d2:	ea03 0501 	and.w	r5, r3, r1
 80024d6:	ea04 0602 	and.w	r6, r4, r2
 80024da:	4629      	mov	r1, r5
 80024dc:	4632      	mov	r2, r6
 80024de:	f04f 0300 	mov.w	r3, #0
 80024e2:	f04f 0400 	mov.w	r4, #0
 80024e6:	0154      	lsls	r4, r2, #5
 80024e8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80024ec:	014b      	lsls	r3, r1, #5
 80024ee:	4619      	mov	r1, r3
 80024f0:	4622      	mov	r2, r4
 80024f2:	1b49      	subs	r1, r1, r5
 80024f4:	eb62 0206 	sbc.w	r2, r2, r6
 80024f8:	f04f 0300 	mov.w	r3, #0
 80024fc:	f04f 0400 	mov.w	r4, #0
 8002500:	0194      	lsls	r4, r2, #6
 8002502:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002506:	018b      	lsls	r3, r1, #6
 8002508:	1a5b      	subs	r3, r3, r1
 800250a:	eb64 0402 	sbc.w	r4, r4, r2
 800250e:	f04f 0100 	mov.w	r1, #0
 8002512:	f04f 0200 	mov.w	r2, #0
 8002516:	00e2      	lsls	r2, r4, #3
 8002518:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800251c:	00d9      	lsls	r1, r3, #3
 800251e:	460b      	mov	r3, r1
 8002520:	4614      	mov	r4, r2
 8002522:	195b      	adds	r3, r3, r5
 8002524:	eb44 0406 	adc.w	r4, r4, r6
 8002528:	f04f 0100 	mov.w	r1, #0
 800252c:	f04f 0200 	mov.w	r2, #0
 8002530:	02a2      	lsls	r2, r4, #10
 8002532:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002536:	0299      	lsls	r1, r3, #10
 8002538:	460b      	mov	r3, r1
 800253a:	4614      	mov	r4, r2
 800253c:	4618      	mov	r0, r3
 800253e:	4621      	mov	r1, r4
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f04f 0400 	mov.w	r4, #0
 8002546:	461a      	mov	r2, r3
 8002548:	4623      	mov	r3, r4
 800254a:	f7fd fe5b 	bl	8000204 <__aeabi_uldivmod>
 800254e:	4603      	mov	r3, r0
 8002550:	460c      	mov	r4, r1
 8002552:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002554:	4b60      	ldr	r3, [pc, #384]	; (80026d8 <HAL_RCC_GetSysClockFreq+0x334>)
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	0c1b      	lsrs	r3, r3, #16
 800255a:	f003 0303 	and.w	r3, r3, #3
 800255e:	3301      	adds	r3, #1
 8002560:	005b      	lsls	r3, r3, #1
 8002562:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8002564:	697a      	ldr	r2, [r7, #20]
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	fbb2 f3f3 	udiv	r3, r2, r3
 800256c:	613b      	str	r3, [r7, #16]
      break;
 800256e:	e0ae      	b.n	80026ce <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002570:	4b59      	ldr	r3, [pc, #356]	; (80026d8 <HAL_RCC_GetSysClockFreq+0x334>)
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002578:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800257a:	4b57      	ldr	r3, [pc, #348]	; (80026d8 <HAL_RCC_GetSysClockFreq+0x334>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d04a      	beq.n	800261c <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002586:	4b54      	ldr	r3, [pc, #336]	; (80026d8 <HAL_RCC_GetSysClockFreq+0x334>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	099b      	lsrs	r3, r3, #6
 800258c:	f04f 0400 	mov.w	r4, #0
 8002590:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002594:	f04f 0200 	mov.w	r2, #0
 8002598:	ea03 0501 	and.w	r5, r3, r1
 800259c:	ea04 0602 	and.w	r6, r4, r2
 80025a0:	4629      	mov	r1, r5
 80025a2:	4632      	mov	r2, r6
 80025a4:	f04f 0300 	mov.w	r3, #0
 80025a8:	f04f 0400 	mov.w	r4, #0
 80025ac:	0154      	lsls	r4, r2, #5
 80025ae:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80025b2:	014b      	lsls	r3, r1, #5
 80025b4:	4619      	mov	r1, r3
 80025b6:	4622      	mov	r2, r4
 80025b8:	1b49      	subs	r1, r1, r5
 80025ba:	eb62 0206 	sbc.w	r2, r2, r6
 80025be:	f04f 0300 	mov.w	r3, #0
 80025c2:	f04f 0400 	mov.w	r4, #0
 80025c6:	0194      	lsls	r4, r2, #6
 80025c8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80025cc:	018b      	lsls	r3, r1, #6
 80025ce:	1a5b      	subs	r3, r3, r1
 80025d0:	eb64 0402 	sbc.w	r4, r4, r2
 80025d4:	f04f 0100 	mov.w	r1, #0
 80025d8:	f04f 0200 	mov.w	r2, #0
 80025dc:	00e2      	lsls	r2, r4, #3
 80025de:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80025e2:	00d9      	lsls	r1, r3, #3
 80025e4:	460b      	mov	r3, r1
 80025e6:	4614      	mov	r4, r2
 80025e8:	195b      	adds	r3, r3, r5
 80025ea:	eb44 0406 	adc.w	r4, r4, r6
 80025ee:	f04f 0100 	mov.w	r1, #0
 80025f2:	f04f 0200 	mov.w	r2, #0
 80025f6:	02a2      	lsls	r2, r4, #10
 80025f8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80025fc:	0299      	lsls	r1, r3, #10
 80025fe:	460b      	mov	r3, r1
 8002600:	4614      	mov	r4, r2
 8002602:	4618      	mov	r0, r3
 8002604:	4621      	mov	r1, r4
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f04f 0400 	mov.w	r4, #0
 800260c:	461a      	mov	r2, r3
 800260e:	4623      	mov	r3, r4
 8002610:	f7fd fdf8 	bl	8000204 <__aeabi_uldivmod>
 8002614:	4603      	mov	r3, r0
 8002616:	460c      	mov	r4, r1
 8002618:	617b      	str	r3, [r7, #20]
 800261a:	e049      	b.n	80026b0 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800261c:	4b2e      	ldr	r3, [pc, #184]	; (80026d8 <HAL_RCC_GetSysClockFreq+0x334>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	099b      	lsrs	r3, r3, #6
 8002622:	f04f 0400 	mov.w	r4, #0
 8002626:	f240 11ff 	movw	r1, #511	; 0x1ff
 800262a:	f04f 0200 	mov.w	r2, #0
 800262e:	ea03 0501 	and.w	r5, r3, r1
 8002632:	ea04 0602 	and.w	r6, r4, r2
 8002636:	4629      	mov	r1, r5
 8002638:	4632      	mov	r2, r6
 800263a:	f04f 0300 	mov.w	r3, #0
 800263e:	f04f 0400 	mov.w	r4, #0
 8002642:	0154      	lsls	r4, r2, #5
 8002644:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002648:	014b      	lsls	r3, r1, #5
 800264a:	4619      	mov	r1, r3
 800264c:	4622      	mov	r2, r4
 800264e:	1b49      	subs	r1, r1, r5
 8002650:	eb62 0206 	sbc.w	r2, r2, r6
 8002654:	f04f 0300 	mov.w	r3, #0
 8002658:	f04f 0400 	mov.w	r4, #0
 800265c:	0194      	lsls	r4, r2, #6
 800265e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002662:	018b      	lsls	r3, r1, #6
 8002664:	1a5b      	subs	r3, r3, r1
 8002666:	eb64 0402 	sbc.w	r4, r4, r2
 800266a:	f04f 0100 	mov.w	r1, #0
 800266e:	f04f 0200 	mov.w	r2, #0
 8002672:	00e2      	lsls	r2, r4, #3
 8002674:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002678:	00d9      	lsls	r1, r3, #3
 800267a:	460b      	mov	r3, r1
 800267c:	4614      	mov	r4, r2
 800267e:	195b      	adds	r3, r3, r5
 8002680:	eb44 0406 	adc.w	r4, r4, r6
 8002684:	f04f 0100 	mov.w	r1, #0
 8002688:	f04f 0200 	mov.w	r2, #0
 800268c:	02a2      	lsls	r2, r4, #10
 800268e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002692:	0299      	lsls	r1, r3, #10
 8002694:	460b      	mov	r3, r1
 8002696:	4614      	mov	r4, r2
 8002698:	4618      	mov	r0, r3
 800269a:	4621      	mov	r1, r4
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f04f 0400 	mov.w	r4, #0
 80026a2:	461a      	mov	r2, r3
 80026a4:	4623      	mov	r3, r4
 80026a6:	f7fd fdad 	bl	8000204 <__aeabi_uldivmod>
 80026aa:	4603      	mov	r3, r0
 80026ac:	460c      	mov	r4, r1
 80026ae:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80026b0:	4b09      	ldr	r3, [pc, #36]	; (80026d8 <HAL_RCC_GetSysClockFreq+0x334>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	0f1b      	lsrs	r3, r3, #28
 80026b6:	f003 0307 	and.w	r3, r3, #7
 80026ba:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80026bc:	697a      	ldr	r2, [r7, #20]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026c4:	613b      	str	r3, [r7, #16]
      break;
 80026c6:	e002      	b.n	80026ce <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026c8:	4b04      	ldr	r3, [pc, #16]	; (80026dc <HAL_RCC_GetSysClockFreq+0x338>)
 80026ca:	613b      	str	r3, [r7, #16]
      break;
 80026cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026ce:	693b      	ldr	r3, [r7, #16]
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	371c      	adds	r7, #28
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026d8:	40023800 	.word	0x40023800
 80026dc:	00f42400 	.word	0x00f42400

080026e0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b086      	sub	sp, #24
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026e8:	2300      	movs	r3, #0
 80026ea:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0301 	and.w	r3, r3, #1
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	f000 8083 	beq.w	8002800 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80026fa:	4b95      	ldr	r3, [pc, #596]	; (8002950 <HAL_RCC_OscConfig+0x270>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f003 030c 	and.w	r3, r3, #12
 8002702:	2b04      	cmp	r3, #4
 8002704:	d019      	beq.n	800273a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002706:	4b92      	ldr	r3, [pc, #584]	; (8002950 <HAL_RCC_OscConfig+0x270>)
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800270e:	2b08      	cmp	r3, #8
 8002710:	d106      	bne.n	8002720 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002712:	4b8f      	ldr	r3, [pc, #572]	; (8002950 <HAL_RCC_OscConfig+0x270>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800271a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800271e:	d00c      	beq.n	800273a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002720:	4b8b      	ldr	r3, [pc, #556]	; (8002950 <HAL_RCC_OscConfig+0x270>)
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002728:	2b0c      	cmp	r3, #12
 800272a:	d112      	bne.n	8002752 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800272c:	4b88      	ldr	r3, [pc, #544]	; (8002950 <HAL_RCC_OscConfig+0x270>)
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002734:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002738:	d10b      	bne.n	8002752 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800273a:	4b85      	ldr	r3, [pc, #532]	; (8002950 <HAL_RCC_OscConfig+0x270>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d05b      	beq.n	80027fe <HAL_RCC_OscConfig+0x11e>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d157      	bne.n	80027fe <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e216      	b.n	8002b80 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800275a:	d106      	bne.n	800276a <HAL_RCC_OscConfig+0x8a>
 800275c:	4b7c      	ldr	r3, [pc, #496]	; (8002950 <HAL_RCC_OscConfig+0x270>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a7b      	ldr	r2, [pc, #492]	; (8002950 <HAL_RCC_OscConfig+0x270>)
 8002762:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002766:	6013      	str	r3, [r2, #0]
 8002768:	e01d      	b.n	80027a6 <HAL_RCC_OscConfig+0xc6>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002772:	d10c      	bne.n	800278e <HAL_RCC_OscConfig+0xae>
 8002774:	4b76      	ldr	r3, [pc, #472]	; (8002950 <HAL_RCC_OscConfig+0x270>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a75      	ldr	r2, [pc, #468]	; (8002950 <HAL_RCC_OscConfig+0x270>)
 800277a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800277e:	6013      	str	r3, [r2, #0]
 8002780:	4b73      	ldr	r3, [pc, #460]	; (8002950 <HAL_RCC_OscConfig+0x270>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a72      	ldr	r2, [pc, #456]	; (8002950 <HAL_RCC_OscConfig+0x270>)
 8002786:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800278a:	6013      	str	r3, [r2, #0]
 800278c:	e00b      	b.n	80027a6 <HAL_RCC_OscConfig+0xc6>
 800278e:	4b70      	ldr	r3, [pc, #448]	; (8002950 <HAL_RCC_OscConfig+0x270>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a6f      	ldr	r2, [pc, #444]	; (8002950 <HAL_RCC_OscConfig+0x270>)
 8002794:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002798:	6013      	str	r3, [r2, #0]
 800279a:	4b6d      	ldr	r3, [pc, #436]	; (8002950 <HAL_RCC_OscConfig+0x270>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a6c      	ldr	r2, [pc, #432]	; (8002950 <HAL_RCC_OscConfig+0x270>)
 80027a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027a4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d013      	beq.n	80027d6 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ae:	f7fe fb81 	bl	8000eb4 <HAL_GetTick>
 80027b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027b4:	e008      	b.n	80027c8 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027b6:	f7fe fb7d 	bl	8000eb4 <HAL_GetTick>
 80027ba:	4602      	mov	r2, r0
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	2b64      	cmp	r3, #100	; 0x64
 80027c2:	d901      	bls.n	80027c8 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e1db      	b.n	8002b80 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027c8:	4b61      	ldr	r3, [pc, #388]	; (8002950 <HAL_RCC_OscConfig+0x270>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d0f0      	beq.n	80027b6 <HAL_RCC_OscConfig+0xd6>
 80027d4:	e014      	b.n	8002800 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d6:	f7fe fb6d 	bl	8000eb4 <HAL_GetTick>
 80027da:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027dc:	e008      	b.n	80027f0 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027de:	f7fe fb69 	bl	8000eb4 <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	2b64      	cmp	r3, #100	; 0x64
 80027ea:	d901      	bls.n	80027f0 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e1c7      	b.n	8002b80 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027f0:	4b57      	ldr	r3, [pc, #348]	; (8002950 <HAL_RCC_OscConfig+0x270>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d1f0      	bne.n	80027de <HAL_RCC_OscConfig+0xfe>
 80027fc:	e000      	b.n	8002800 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027fe:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0302 	and.w	r3, r3, #2
 8002808:	2b00      	cmp	r3, #0
 800280a:	d06f      	beq.n	80028ec <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800280c:	4b50      	ldr	r3, [pc, #320]	; (8002950 <HAL_RCC_OscConfig+0x270>)
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	f003 030c 	and.w	r3, r3, #12
 8002814:	2b00      	cmp	r3, #0
 8002816:	d017      	beq.n	8002848 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002818:	4b4d      	ldr	r3, [pc, #308]	; (8002950 <HAL_RCC_OscConfig+0x270>)
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002820:	2b08      	cmp	r3, #8
 8002822:	d105      	bne.n	8002830 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002824:	4b4a      	ldr	r3, [pc, #296]	; (8002950 <HAL_RCC_OscConfig+0x270>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d00b      	beq.n	8002848 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002830:	4b47      	ldr	r3, [pc, #284]	; (8002950 <HAL_RCC_OscConfig+0x270>)
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002838:	2b0c      	cmp	r3, #12
 800283a:	d11c      	bne.n	8002876 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800283c:	4b44      	ldr	r3, [pc, #272]	; (8002950 <HAL_RCC_OscConfig+0x270>)
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d116      	bne.n	8002876 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002848:	4b41      	ldr	r3, [pc, #260]	; (8002950 <HAL_RCC_OscConfig+0x270>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0302 	and.w	r3, r3, #2
 8002850:	2b00      	cmp	r3, #0
 8002852:	d005      	beq.n	8002860 <HAL_RCC_OscConfig+0x180>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	2b01      	cmp	r3, #1
 800285a:	d001      	beq.n	8002860 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e18f      	b.n	8002b80 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002860:	4b3b      	ldr	r3, [pc, #236]	; (8002950 <HAL_RCC_OscConfig+0x270>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	691b      	ldr	r3, [r3, #16]
 800286c:	00db      	lsls	r3, r3, #3
 800286e:	4938      	ldr	r1, [pc, #224]	; (8002950 <HAL_RCC_OscConfig+0x270>)
 8002870:	4313      	orrs	r3, r2
 8002872:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002874:	e03a      	b.n	80028ec <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d020      	beq.n	80028c0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800287e:	4b35      	ldr	r3, [pc, #212]	; (8002954 <HAL_RCC_OscConfig+0x274>)
 8002880:	2201      	movs	r2, #1
 8002882:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002884:	f7fe fb16 	bl	8000eb4 <HAL_GetTick>
 8002888:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800288a:	e008      	b.n	800289e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800288c:	f7fe fb12 	bl	8000eb4 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	2b02      	cmp	r3, #2
 8002898:	d901      	bls.n	800289e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e170      	b.n	8002b80 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800289e:	4b2c      	ldr	r3, [pc, #176]	; (8002950 <HAL_RCC_OscConfig+0x270>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d0f0      	beq.n	800288c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028aa:	4b29      	ldr	r3, [pc, #164]	; (8002950 <HAL_RCC_OscConfig+0x270>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	00db      	lsls	r3, r3, #3
 80028b8:	4925      	ldr	r1, [pc, #148]	; (8002950 <HAL_RCC_OscConfig+0x270>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	600b      	str	r3, [r1, #0]
 80028be:	e015      	b.n	80028ec <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028c0:	4b24      	ldr	r3, [pc, #144]	; (8002954 <HAL_RCC_OscConfig+0x274>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c6:	f7fe faf5 	bl	8000eb4 <HAL_GetTick>
 80028ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028cc:	e008      	b.n	80028e0 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028ce:	f7fe faf1 	bl	8000eb4 <HAL_GetTick>
 80028d2:	4602      	mov	r2, r0
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d901      	bls.n	80028e0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e14f      	b.n	8002b80 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028e0:	4b1b      	ldr	r3, [pc, #108]	; (8002950 <HAL_RCC_OscConfig+0x270>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0302 	and.w	r3, r3, #2
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d1f0      	bne.n	80028ce <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0308 	and.w	r3, r3, #8
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d037      	beq.n	8002968 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	695b      	ldr	r3, [r3, #20]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d016      	beq.n	800292e <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002900:	4b15      	ldr	r3, [pc, #84]	; (8002958 <HAL_RCC_OscConfig+0x278>)
 8002902:	2201      	movs	r2, #1
 8002904:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002906:	f7fe fad5 	bl	8000eb4 <HAL_GetTick>
 800290a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800290c:	e008      	b.n	8002920 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800290e:	f7fe fad1 	bl	8000eb4 <HAL_GetTick>
 8002912:	4602      	mov	r2, r0
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	2b02      	cmp	r3, #2
 800291a:	d901      	bls.n	8002920 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	e12f      	b.n	8002b80 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002920:	4b0b      	ldr	r3, [pc, #44]	; (8002950 <HAL_RCC_OscConfig+0x270>)
 8002922:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002924:	f003 0302 	and.w	r3, r3, #2
 8002928:	2b00      	cmp	r3, #0
 800292a:	d0f0      	beq.n	800290e <HAL_RCC_OscConfig+0x22e>
 800292c:	e01c      	b.n	8002968 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800292e:	4b0a      	ldr	r3, [pc, #40]	; (8002958 <HAL_RCC_OscConfig+0x278>)
 8002930:	2200      	movs	r2, #0
 8002932:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002934:	f7fe fabe 	bl	8000eb4 <HAL_GetTick>
 8002938:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800293a:	e00f      	b.n	800295c <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800293c:	f7fe faba 	bl	8000eb4 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	2b02      	cmp	r3, #2
 8002948:	d908      	bls.n	800295c <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e118      	b.n	8002b80 <HAL_RCC_OscConfig+0x4a0>
 800294e:	bf00      	nop
 8002950:	40023800 	.word	0x40023800
 8002954:	42470000 	.word	0x42470000
 8002958:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800295c:	4b8a      	ldr	r3, [pc, #552]	; (8002b88 <HAL_RCC_OscConfig+0x4a8>)
 800295e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002960:	f003 0302 	and.w	r3, r3, #2
 8002964:	2b00      	cmp	r3, #0
 8002966:	d1e9      	bne.n	800293c <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0304 	and.w	r3, r3, #4
 8002970:	2b00      	cmp	r3, #0
 8002972:	f000 8097 	beq.w	8002aa4 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002976:	2300      	movs	r3, #0
 8002978:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800297a:	4b83      	ldr	r3, [pc, #524]	; (8002b88 <HAL_RCC_OscConfig+0x4a8>)
 800297c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d10f      	bne.n	80029a6 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002986:	2300      	movs	r3, #0
 8002988:	60fb      	str	r3, [r7, #12]
 800298a:	4b7f      	ldr	r3, [pc, #508]	; (8002b88 <HAL_RCC_OscConfig+0x4a8>)
 800298c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298e:	4a7e      	ldr	r2, [pc, #504]	; (8002b88 <HAL_RCC_OscConfig+0x4a8>)
 8002990:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002994:	6413      	str	r3, [r2, #64]	; 0x40
 8002996:	4b7c      	ldr	r3, [pc, #496]	; (8002b88 <HAL_RCC_OscConfig+0x4a8>)
 8002998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800299e:	60fb      	str	r3, [r7, #12]
 80029a0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80029a2:	2301      	movs	r3, #1
 80029a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029a6:	4b79      	ldr	r3, [pc, #484]	; (8002b8c <HAL_RCC_OscConfig+0x4ac>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d118      	bne.n	80029e4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029b2:	4b76      	ldr	r3, [pc, #472]	; (8002b8c <HAL_RCC_OscConfig+0x4ac>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a75      	ldr	r2, [pc, #468]	; (8002b8c <HAL_RCC_OscConfig+0x4ac>)
 80029b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029be:	f7fe fa79 	bl	8000eb4 <HAL_GetTick>
 80029c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029c4:	e008      	b.n	80029d8 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029c6:	f7fe fa75 	bl	8000eb4 <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d901      	bls.n	80029d8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	e0d3      	b.n	8002b80 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029d8:	4b6c      	ldr	r3, [pc, #432]	; (8002b8c <HAL_RCC_OscConfig+0x4ac>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d0f0      	beq.n	80029c6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d106      	bne.n	80029fa <HAL_RCC_OscConfig+0x31a>
 80029ec:	4b66      	ldr	r3, [pc, #408]	; (8002b88 <HAL_RCC_OscConfig+0x4a8>)
 80029ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f0:	4a65      	ldr	r2, [pc, #404]	; (8002b88 <HAL_RCC_OscConfig+0x4a8>)
 80029f2:	f043 0301 	orr.w	r3, r3, #1
 80029f6:	6713      	str	r3, [r2, #112]	; 0x70
 80029f8:	e01c      	b.n	8002a34 <HAL_RCC_OscConfig+0x354>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	2b05      	cmp	r3, #5
 8002a00:	d10c      	bne.n	8002a1c <HAL_RCC_OscConfig+0x33c>
 8002a02:	4b61      	ldr	r3, [pc, #388]	; (8002b88 <HAL_RCC_OscConfig+0x4a8>)
 8002a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a06:	4a60      	ldr	r2, [pc, #384]	; (8002b88 <HAL_RCC_OscConfig+0x4a8>)
 8002a08:	f043 0304 	orr.w	r3, r3, #4
 8002a0c:	6713      	str	r3, [r2, #112]	; 0x70
 8002a0e:	4b5e      	ldr	r3, [pc, #376]	; (8002b88 <HAL_RCC_OscConfig+0x4a8>)
 8002a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a12:	4a5d      	ldr	r2, [pc, #372]	; (8002b88 <HAL_RCC_OscConfig+0x4a8>)
 8002a14:	f043 0301 	orr.w	r3, r3, #1
 8002a18:	6713      	str	r3, [r2, #112]	; 0x70
 8002a1a:	e00b      	b.n	8002a34 <HAL_RCC_OscConfig+0x354>
 8002a1c:	4b5a      	ldr	r3, [pc, #360]	; (8002b88 <HAL_RCC_OscConfig+0x4a8>)
 8002a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a20:	4a59      	ldr	r2, [pc, #356]	; (8002b88 <HAL_RCC_OscConfig+0x4a8>)
 8002a22:	f023 0301 	bic.w	r3, r3, #1
 8002a26:	6713      	str	r3, [r2, #112]	; 0x70
 8002a28:	4b57      	ldr	r3, [pc, #348]	; (8002b88 <HAL_RCC_OscConfig+0x4a8>)
 8002a2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a2c:	4a56      	ldr	r2, [pc, #344]	; (8002b88 <HAL_RCC_OscConfig+0x4a8>)
 8002a2e:	f023 0304 	bic.w	r3, r3, #4
 8002a32:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d015      	beq.n	8002a68 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a3c:	f7fe fa3a 	bl	8000eb4 <HAL_GetTick>
 8002a40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a42:	e00a      	b.n	8002a5a <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a44:	f7fe fa36 	bl	8000eb4 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e092      	b.n	8002b80 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a5a:	4b4b      	ldr	r3, [pc, #300]	; (8002b88 <HAL_RCC_OscConfig+0x4a8>)
 8002a5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d0ee      	beq.n	8002a44 <HAL_RCC_OscConfig+0x364>
 8002a66:	e014      	b.n	8002a92 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a68:	f7fe fa24 	bl	8000eb4 <HAL_GetTick>
 8002a6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a6e:	e00a      	b.n	8002a86 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a70:	f7fe fa20 	bl	8000eb4 <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e07c      	b.n	8002b80 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a86:	4b40      	ldr	r3, [pc, #256]	; (8002b88 <HAL_RCC_OscConfig+0x4a8>)
 8002a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d1ee      	bne.n	8002a70 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a92:	7dfb      	ldrb	r3, [r7, #23]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d105      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a98:	4b3b      	ldr	r3, [pc, #236]	; (8002b88 <HAL_RCC_OscConfig+0x4a8>)
 8002a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9c:	4a3a      	ldr	r2, [pc, #232]	; (8002b88 <HAL_RCC_OscConfig+0x4a8>)
 8002a9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002aa2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	699b      	ldr	r3, [r3, #24]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d068      	beq.n	8002b7e <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002aac:	4b36      	ldr	r3, [pc, #216]	; (8002b88 <HAL_RCC_OscConfig+0x4a8>)
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	f003 030c 	and.w	r3, r3, #12
 8002ab4:	2b08      	cmp	r3, #8
 8002ab6:	d060      	beq.n	8002b7a <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	699b      	ldr	r3, [r3, #24]
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d145      	bne.n	8002b4c <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ac0:	4b33      	ldr	r3, [pc, #204]	; (8002b90 <HAL_RCC_OscConfig+0x4b0>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac6:	f7fe f9f5 	bl	8000eb4 <HAL_GetTick>
 8002aca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002acc:	e008      	b.n	8002ae0 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ace:	f7fe f9f1 	bl	8000eb4 <HAL_GetTick>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d901      	bls.n	8002ae0 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e04f      	b.n	8002b80 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ae0:	4b29      	ldr	r3, [pc, #164]	; (8002b88 <HAL_RCC_OscConfig+0x4a8>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d1f0      	bne.n	8002ace <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	69da      	ldr	r2, [r3, #28]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6a1b      	ldr	r3, [r3, #32]
 8002af4:	431a      	orrs	r2, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afa:	019b      	lsls	r3, r3, #6
 8002afc:	431a      	orrs	r2, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b02:	085b      	lsrs	r3, r3, #1
 8002b04:	3b01      	subs	r3, #1
 8002b06:	041b      	lsls	r3, r3, #16
 8002b08:	431a      	orrs	r2, r3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b0e:	061b      	lsls	r3, r3, #24
 8002b10:	431a      	orrs	r2, r3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b16:	071b      	lsls	r3, r3, #28
 8002b18:	491b      	ldr	r1, [pc, #108]	; (8002b88 <HAL_RCC_OscConfig+0x4a8>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b1e:	4b1c      	ldr	r3, [pc, #112]	; (8002b90 <HAL_RCC_OscConfig+0x4b0>)
 8002b20:	2201      	movs	r2, #1
 8002b22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b24:	f7fe f9c6 	bl	8000eb4 <HAL_GetTick>
 8002b28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b2a:	e008      	b.n	8002b3e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b2c:	f7fe f9c2 	bl	8000eb4 <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e020      	b.n	8002b80 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b3e:	4b12      	ldr	r3, [pc, #72]	; (8002b88 <HAL_RCC_OscConfig+0x4a8>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d0f0      	beq.n	8002b2c <HAL_RCC_OscConfig+0x44c>
 8002b4a:	e018      	b.n	8002b7e <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b4c:	4b10      	ldr	r3, [pc, #64]	; (8002b90 <HAL_RCC_OscConfig+0x4b0>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b52:	f7fe f9af 	bl	8000eb4 <HAL_GetTick>
 8002b56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b58:	e008      	b.n	8002b6c <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b5a:	f7fe f9ab 	bl	8000eb4 <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d901      	bls.n	8002b6c <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e009      	b.n	8002b80 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b6c:	4b06      	ldr	r3, [pc, #24]	; (8002b88 <HAL_RCC_OscConfig+0x4a8>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d1f0      	bne.n	8002b5a <HAL_RCC_OscConfig+0x47a>
 8002b78:	e001      	b.n	8002b7e <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e000      	b.n	8002b80 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8002b7e:	2300      	movs	r3, #0
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3718      	adds	r7, #24
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	40023800 	.word	0x40023800
 8002b8c:	40007000 	.word	0x40007000
 8002b90:	42470060 	.word	0x42470060

08002b94 <atanf>:
 8002b94:	b538      	push	{r3, r4, r5, lr}
 8002b96:	ee10 5a10 	vmov	r5, s0
 8002b9a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8002b9e:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8002ba2:	eef0 7a40 	vmov.f32	s15, s0
 8002ba6:	db10      	blt.n	8002bca <atanf+0x36>
 8002ba8:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8002bac:	dd04      	ble.n	8002bb8 <atanf+0x24>
 8002bae:	ee70 7a00 	vadd.f32	s15, s0, s0
 8002bb2:	eeb0 0a67 	vmov.f32	s0, s15
 8002bb6:	bd38      	pop	{r3, r4, r5, pc}
 8002bb8:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8002cf0 <atanf+0x15c>
 8002bbc:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8002cf4 <atanf+0x160>
 8002bc0:	2d00      	cmp	r5, #0
 8002bc2:	bfd8      	it	le
 8002bc4:	eef0 7a47 	vmovle.f32	s15, s14
 8002bc8:	e7f3      	b.n	8002bb2 <atanf+0x1e>
 8002bca:	4b4b      	ldr	r3, [pc, #300]	; (8002cf8 <atanf+0x164>)
 8002bcc:	429c      	cmp	r4, r3
 8002bce:	dc10      	bgt.n	8002bf2 <atanf+0x5e>
 8002bd0:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8002bd4:	da0a      	bge.n	8002bec <atanf+0x58>
 8002bd6:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8002cfc <atanf+0x168>
 8002bda:	ee30 7a07 	vadd.f32	s14, s0, s14
 8002bde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002be2:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8002be6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bea:	dce2      	bgt.n	8002bb2 <atanf+0x1e>
 8002bec:	f04f 33ff 	mov.w	r3, #4294967295
 8002bf0:	e013      	b.n	8002c1a <atanf+0x86>
 8002bf2:	f000 f8a3 	bl	8002d3c <fabsf>
 8002bf6:	4b42      	ldr	r3, [pc, #264]	; (8002d00 <atanf+0x16c>)
 8002bf8:	429c      	cmp	r4, r3
 8002bfa:	dc4f      	bgt.n	8002c9c <atanf+0x108>
 8002bfc:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8002c00:	429c      	cmp	r4, r3
 8002c02:	dc41      	bgt.n	8002c88 <atanf+0xf4>
 8002c04:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8002c08:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8002c0c:	eea0 7a27 	vfma.f32	s14, s0, s15
 8002c10:	2300      	movs	r3, #0
 8002c12:	ee30 0a27 	vadd.f32	s0, s0, s15
 8002c16:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8002c1a:	1c5a      	adds	r2, r3, #1
 8002c1c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8002c20:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8002d04 <atanf+0x170>
 8002c24:	eddf 5a38 	vldr	s11, [pc, #224]	; 8002d08 <atanf+0x174>
 8002c28:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8002d0c <atanf+0x178>
 8002c2c:	ee66 6a06 	vmul.f32	s13, s12, s12
 8002c30:	eee6 5a87 	vfma.f32	s11, s13, s14
 8002c34:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8002d10 <atanf+0x17c>
 8002c38:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8002c3c:	eddf 5a35 	vldr	s11, [pc, #212]	; 8002d14 <atanf+0x180>
 8002c40:	eee7 5a26 	vfma.f32	s11, s14, s13
 8002c44:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8002d18 <atanf+0x184>
 8002c48:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8002c4c:	eddf 5a33 	vldr	s11, [pc, #204]	; 8002d1c <atanf+0x188>
 8002c50:	eee7 5a26 	vfma.f32	s11, s14, s13
 8002c54:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8002d20 <atanf+0x18c>
 8002c58:	eea6 5a87 	vfma.f32	s10, s13, s14
 8002c5c:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8002d24 <atanf+0x190>
 8002c60:	eea5 7a26 	vfma.f32	s14, s10, s13
 8002c64:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8002d28 <atanf+0x194>
 8002c68:	eea7 5a26 	vfma.f32	s10, s14, s13
 8002c6c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002d2c <atanf+0x198>
 8002c70:	eea5 7a26 	vfma.f32	s14, s10, s13
 8002c74:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002c78:	eea5 7a86 	vfma.f32	s14, s11, s12
 8002c7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c80:	d121      	bne.n	8002cc6 <atanf+0x132>
 8002c82:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002c86:	e794      	b.n	8002bb2 <atanf+0x1e>
 8002c88:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002c8c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8002c90:	ee30 0a27 	vadd.f32	s0, s0, s15
 8002c94:	2301      	movs	r3, #1
 8002c96:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8002c9a:	e7be      	b.n	8002c1a <atanf+0x86>
 8002c9c:	4b24      	ldr	r3, [pc, #144]	; (8002d30 <atanf+0x19c>)
 8002c9e:	429c      	cmp	r4, r3
 8002ca0:	dc0b      	bgt.n	8002cba <atanf+0x126>
 8002ca2:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8002ca6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002caa:	eea0 7a27 	vfma.f32	s14, s0, s15
 8002cae:	2302      	movs	r3, #2
 8002cb0:	ee70 6a67 	vsub.f32	s13, s0, s15
 8002cb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002cb8:	e7af      	b.n	8002c1a <atanf+0x86>
 8002cba:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8002cbe:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e7a9      	b.n	8002c1a <atanf+0x86>
 8002cc6:	4a1b      	ldr	r2, [pc, #108]	; (8002d34 <atanf+0x1a0>)
 8002cc8:	491b      	ldr	r1, [pc, #108]	; (8002d38 <atanf+0x1a4>)
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	441a      	add	r2, r3
 8002cce:	440b      	add	r3, r1
 8002cd0:	edd3 6a00 	vldr	s13, [r3]
 8002cd4:	ee37 7a66 	vsub.f32	s14, s14, s13
 8002cd8:	2d00      	cmp	r5, #0
 8002cda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cde:	ed92 7a00 	vldr	s14, [r2]
 8002ce2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ce6:	bfb8      	it	lt
 8002ce8:	eef1 7a67 	vneglt.f32	s15, s15
 8002cec:	e761      	b.n	8002bb2 <atanf+0x1e>
 8002cee:	bf00      	nop
 8002cf0:	bfc90fdb 	.word	0xbfc90fdb
 8002cf4:	3fc90fdb 	.word	0x3fc90fdb
 8002cf8:	3edfffff 	.word	0x3edfffff
 8002cfc:	7149f2ca 	.word	0x7149f2ca
 8002d00:	3f97ffff 	.word	0x3f97ffff
 8002d04:	3c8569d7 	.word	0x3c8569d7
 8002d08:	3d4bda59 	.word	0x3d4bda59
 8002d0c:	bd6ef16b 	.word	0xbd6ef16b
 8002d10:	3d886b35 	.word	0x3d886b35
 8002d14:	3dba2e6e 	.word	0x3dba2e6e
 8002d18:	3e124925 	.word	0x3e124925
 8002d1c:	3eaaaaab 	.word	0x3eaaaaab
 8002d20:	bd15a221 	.word	0xbd15a221
 8002d24:	bd9d8795 	.word	0xbd9d8795
 8002d28:	bde38e38 	.word	0xbde38e38
 8002d2c:	be4ccccd 	.word	0xbe4ccccd
 8002d30:	401bffff 	.word	0x401bffff
 8002d34:	08002de4 	.word	0x08002de4
 8002d38:	08002df4 	.word	0x08002df4

08002d3c <fabsf>:
 8002d3c:	ee10 3a10 	vmov	r3, s0
 8002d40:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d44:	ee00 3a10 	vmov	s0, r3
 8002d48:	4770      	bx	lr
	...

08002d4c <__libc_init_array>:
 8002d4c:	b570      	push	{r4, r5, r6, lr}
 8002d4e:	4e0d      	ldr	r6, [pc, #52]	; (8002d84 <__libc_init_array+0x38>)
 8002d50:	4c0d      	ldr	r4, [pc, #52]	; (8002d88 <__libc_init_array+0x3c>)
 8002d52:	1ba4      	subs	r4, r4, r6
 8002d54:	10a4      	asrs	r4, r4, #2
 8002d56:	2500      	movs	r5, #0
 8002d58:	42a5      	cmp	r5, r4
 8002d5a:	d109      	bne.n	8002d70 <__libc_init_array+0x24>
 8002d5c:	4e0b      	ldr	r6, [pc, #44]	; (8002d8c <__libc_init_array+0x40>)
 8002d5e:	4c0c      	ldr	r4, [pc, #48]	; (8002d90 <__libc_init_array+0x44>)
 8002d60:	f000 f82c 	bl	8002dbc <_init>
 8002d64:	1ba4      	subs	r4, r4, r6
 8002d66:	10a4      	asrs	r4, r4, #2
 8002d68:	2500      	movs	r5, #0
 8002d6a:	42a5      	cmp	r5, r4
 8002d6c:	d105      	bne.n	8002d7a <__libc_init_array+0x2e>
 8002d6e:	bd70      	pop	{r4, r5, r6, pc}
 8002d70:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d74:	4798      	blx	r3
 8002d76:	3501      	adds	r5, #1
 8002d78:	e7ee      	b.n	8002d58 <__libc_init_array+0xc>
 8002d7a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d7e:	4798      	blx	r3
 8002d80:	3501      	adds	r5, #1
 8002d82:	e7f2      	b.n	8002d6a <__libc_init_array+0x1e>
 8002d84:	08002e0c 	.word	0x08002e0c
 8002d88:	08002e0c 	.word	0x08002e0c
 8002d8c:	08002e0c 	.word	0x08002e0c
 8002d90:	08002e10 	.word	0x08002e10

08002d94 <memcpy>:
 8002d94:	b510      	push	{r4, lr}
 8002d96:	1e43      	subs	r3, r0, #1
 8002d98:	440a      	add	r2, r1
 8002d9a:	4291      	cmp	r1, r2
 8002d9c:	d100      	bne.n	8002da0 <memcpy+0xc>
 8002d9e:	bd10      	pop	{r4, pc}
 8002da0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002da4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002da8:	e7f7      	b.n	8002d9a <memcpy+0x6>

08002daa <memset>:
 8002daa:	4402      	add	r2, r0
 8002dac:	4603      	mov	r3, r0
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d100      	bne.n	8002db4 <memset+0xa>
 8002db2:	4770      	bx	lr
 8002db4:	f803 1b01 	strb.w	r1, [r3], #1
 8002db8:	e7f9      	b.n	8002dae <memset+0x4>
	...

08002dbc <_init>:
 8002dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dbe:	bf00      	nop
 8002dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dc2:	bc08      	pop	{r3}
 8002dc4:	469e      	mov	lr, r3
 8002dc6:	4770      	bx	lr

08002dc8 <_fini>:
 8002dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dca:	bf00      	nop
 8002dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dce:	bc08      	pop	{r3}
 8002dd0:	469e      	mov	lr, r3
 8002dd2:	4770      	bx	lr
